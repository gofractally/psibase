name: Ubuntu 18.04
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "release/*"
  pull_request:
    types: [assigned, opened, synchronize, reopened, labeled]

env:
  UBUNTU_1804_IMAGE: "ghcr.io/gofractally/internal-ubuntu-1804-builder:a9ba7f24caabe9980ee382dc04d702cd0859c1eb"

jobs:
  ubuntu-1804-build:
    name: Ubuntu 18.04 | Build
    runs-on: ubuntu-latest
    steps:
      - name: Timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 0
      - name: Preserve ccache
        uses: actions/cache@v1.1.0
        with:
          path: .caches
          key: $ubuntu-18.04-caches-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            $ubuntu-18.04-caches-
      - name: Build
        run: |
          set -e
          echo =====
          mkdir -p $HOME/.ssh
          chmod 700 $HOME/.ssh
          git submodule update --init --recursive
          echo =====
          export CCACHE_DIR=${GITHUB_WORKSPACE}/.caches/ccache
          export SCCACHE_DIR=${GITHUB_WORKSPACE}/.caches/sccache
          export CCACHE_CONFIGPATH=${GITHUB_WORKSPACE}/ccache.conf
          echo max_size = 600M >${GITHUB_WORKSPACE}/ccache.conf
          echo log_file = ${GITHUB_WORKSPACE}/ccache.log >>${GITHUB_WORKSPACE}/ccache.conf
          export SCCACHE_CACHE_SIZE=200M
          export RUSTC_WRAPPER=sccache
          export LLVM_CONFIG_PATH=/opt/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/llvm-config
          export LD_LIBRARY_PATH=/opt/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04/lib/
          export DOCKER="docker run --rm -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} -w ${GITHUB_WORKSPACE} -e CCACHE_DIR -e CCACHE_CONFIGPATH -e SCCACHE_DIR -e SCCACHE_CACHE_SIZE -e RUSTC_WRAPPER -e LLVM_CONFIG_PATH -e LD_LIBRARY_PATH --user $(id -u):$(id -g) ${UBUNTU_1804_IMAGE}"
          export DOCKER_ROOT="docker run --rm -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} -w ${GITHUB_WORKSPACE} -e CCACHE_DIR -e CCACHE_CONFIGPATH -e SCCACHE_DIR -e SCCACHE_CACHE_SIZE -e RUSTC_WRAPPER -e LLVM_CONFIG_PATH -e LD_LIBRARY_PATH ${UBUNTU_1804_IMAGE}"
          docker pull ${UBUNTU_1804_IMAGE}
          echo =====
          ${DOCKER} ccache -s
          echo =====
          ${DOCKER} sccache -s
          echo =====
          mkdir build
          ${DOCKER} bash -c "cd build && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_RELEASE_WASM=yes -DBUILD_DEBUG_WASM=yes -DBUILD_DOC=yes -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache .."
          echo =====
          ${DOCKER} bash -c "cd build && make -j $(nproc)"
          echo =====
          ${DOCKER} bash -c "cd build && ctest -j $(nproc)"
          echo =====
          ls -la ${GITHUB_WORKSPACE}
          echo =====
          ${DOCKER} ccache -s
          echo =====
          ${DOCKER} sccache -s
          echo =====
          bash -c "cd build && tar czf ../psidk-linux.tar.gz psidk"
          echo =====
          ${DOCKER} bash -c "cd build && mv book psidk-book && tar czf ../psidk-book.tar.gz psidk-book"
      - name: Upload psidk-linux
        uses: actions/upload-artifact@v1
        with:
          name: psidk-linux
          path: psidk-linux.tar.gz
      - name: Upload psidk-book
        uses: actions/upload-artifact@v1
        with:
          name: psidk-book
          path: psidk-book.tar.gz
