package auth-sig:plugin;

/// Methods related to key management
interface keyvault {
    use host:types/types.{error};
    use host:crypto/types.{keypair, pem};

    /// Generates a new keypair that is unmanaged (nothing is stored).
    /// The full keypair is returned to the caller.
    generate-unmanaged-keypair: func() -> result<keypair, error>;

    /// Returns the public key corresponding to the specified
    /// private key.
    pub-from-priv: func(private-key: pem) -> result<pem, error>;

    /// Returns the DER encoded key
    to-der: func(key: pem) -> result<list<u8>, error>;

    /// Signs a pre-hashed message with the specified DER-encoded private key
    sign: func(hashed-message: list<u8>, public-key: list<u8>) -> result<list<u8>, error>;

    /// Signs a pre-hashed message with the specified DER-encoded private key
    sign-explicit: func(hashed-message: list<u8>, private-key: list<u8>) -> result<list<u8>, error>;

    /// Imports a PEM-encoded private key into the keyvault.
    /// This does not change the key of any account, it simply allows AuthSig to sign
    ///   with the specified private key.
    /// Returns the corresponding public key in PEM format.
    import-key: func(private-key: pem, extractable: option<bool>) -> result<pem, error>;
}

interface actions {
    use host:crypto/types.{pem};
    use host:types/types.{error};

    /// Updates the key used by the current user to the specified public key
    /// The specified public key should be the PEM representation of the public key
    set-key: func(public-key: pem) -> result<_, error>;
}

world imports {
    import keyvault;
    import actions;
}