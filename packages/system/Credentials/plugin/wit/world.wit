/// This plugin facilitates the creation of a transaction signed by a credential not tied to a 
/// specific account.
///
/// This auth service should be notified with the credential that should be used to sign the active
///   transaction. This auth plugin in turn notifies the transact plugin that it has a claim/proof
/// to attach to the transaction currently being constructed.
///
/// At the time of transaction construction/submission, the transact plugin will call
/// into this auth service plugin for the claims/proofs (just like any other auth service).
///
/// This auth service specifies the claim as the public key corresponding to the credential private
/// key. The proof is the signature on the transaction using that same private key.
///
/// The corresponding auth service to this plugin verifies that the transaction claims to be
/// signed by a key that corresponds to a known credential, that the verify-service is supported, 
/// and that the actions being called are supported by this credential. Authorized actions are those
/// that are defined in the credential issuer service.
package credentials:plugin;

interface types {
    record credential {
        p256-pub: list<u8>,
        p256-priv: list<u8>
    }
}

interface api {
    use types.{credential};
    /// Sets a latch such that the next time an action is added to the transaction during this 
    ///   execution context, a claim/proof will be added to the transaction corresponding to the 
    ///   specified credential key.
    sign-latch: func(credential: credential);
}

world imports {
    import api;
}
