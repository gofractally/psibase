/// The staged-tx plugin allows apps to set a "propose latch" for an account. What makes it a "latch" is that 
/// gets automatically unset after the completion of the call context in which it is set. A plugin must continually
/// opt-in to transaction staging by setting the latch at the beginning of every call context in which it is desired.
/// 
/// When the latch is set, server actions scheduled by plugins are staged by the current user instead of being
/// executed them. These actions are proposed for execution by the account specified when enabling the latch.
package staged-tx:plugin;

interface proposer {
    use host:types/types.{error};
    use transact:plugin/types.{action};

    /// This is a latch that is set for this plugin call context, and unset when the call context 
    /// is resolved.
    /// 
    /// Any actions that are scheduled for execution by the currently logged-in user while there is
    /// an active propose-latch are staged (by the logged-in user) for execution by the specified `account`
    /// rather than being executed by the currently logged-in user.
    /// 
    /// `account` - The account on behalf of which the currently logged-in user is 
    ///             proposing transactions.
    set-propose-latch: func(account: option<string>) -> result<_, error>;

    /// Proposes a transaction. This can only be called by the packages plugin.
    ///
    /// Rationale: propose requires special privileges because it can send
    /// actions to any service. packages cannot use the normal method of
    /// using the plugin for X to send actions to X, because X might not
    /// exist yet.
    ///
    /// * `actions`: The actions to propose
    /// * `auto-exec`: Whether the transaction should be executed as soon
    ///                as it has enough approvals.
    propose: func(actions: list<action>, auto-exec: bool) -> result<_, error>;

    /// Removes (deletes) the specified staged transaction
    ///
    /// This is only callable by the proposer of the staged transaction
    /// 
    /// Parameters:
    /// * `id`: The ID of the database record containing the staged transaction
    remove: func(id: u32) -> result<_, error>;
}

interface respondent {
    use host:types/types.{error};

    /// Accept the specified staged transaction
    ///
    /// Depending on the staging rules enforced by the auth service of the sender
    /// of the staged transaction, this could result in the execution of the staged 
    /// transaction.
    ///
    /// Parameters:
    /// * `id`: The ID of the database record containing the staged transaction
    accept: func(id: u32) -> result<_, error>;

    /// Reject the specified staged transaction
    ///
    /// Depending on the staging rules enforced by the auth service of the sender
    /// of the staged transaction, this could result in the complete rejection and deletion of the 
    /// staged transaction.
    ///
    /// Parameters:
    /// * `id`: The ID of the database record containing the staged transaction
    reject: func(id: u32) -> result<_, error>;

    /// Executes a transaction
    ///
    /// This is only needed when automatic execution is disabled
    ///
    /// * `id`: The ID of the database record containing the staged transaction
    execute: func(id: u32) -> result<_, error>;
}

world imports {
    import proposer;
    import respondent;
}
