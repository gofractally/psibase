package transact:plugin;

interface types {
    /// A list of `claim` objects is added to every submitted transaction.
    /// A claim is something the submitter of a transaction claims to know (e.g. a public key)
    record claim {
        /// The name of the service used to verify the claim is valid
        verify-service: string,
        /// The raw claim data
        raw-data: list<u8>,
    }

    /// The verify-service specified in the claim is the service that knows how to verify that
    /// a proof actually proves the claim.
    record proof {
        signature: list<u8>,
    }

    /// Action data from a transaction
    record action {
        /// The sender of this action
        sender: string,
        /// The service that will execute this action
        service: string,
        /// The name of the action to execute
        method: string, 
        /// The data passed to the action, packed in fracpack format
        raw-data: list<u8>,
    }
}

/// Hooks allow plugins to hook into the transact plugin and customize its behavior 
/// during transaction construction and authorization.
interface hooks {
    /// Allows the the caller plugin to add transaction authorization claims and proofs 
    /// based on the next action added to this transaction.
    hook-action-auth: func();

    /// Allows the caller plugin to manage the sender of any subsequent actions added to this
    /// transaction.
    hook-actions-sender: func();

    /// Allows the caller plugin to opt-out of managing the sender of any subsequent actions added
    /// to this transaction.
    unhook-actions-sender: func();

    /// Allows the caller plugin to transform the actions in a transaction before it is published.
    /// Adding a label allows the transformation to happen in batches (grouped by label)
    /// 
    /// Parameters
    /// * `label`: A label identifying the group into which actions are placed. 
    hook-tx-transform-label: func(label: option<string>);
}

interface intf {
    use host:types/types.{error};

    /// Adds the specified service action to the current transaction.
    /// 
    /// No service is specified, as it is only possible for a plugin to call an
    /// action on its own service. To call actions on another service, it must use
    /// that service's plugin.
    /// 
    /// Parameters
    /// * `method-name`: The method name of the action being called
    /// * `packed-args`: The arguments for the action, packed into fracpack format
    add-action-to-transaction: func(method-name: string, packed-args: list<u8>) -> result<_, error>;
}

interface auth {
    use host:types/types.{error};

    /// Gets a bearer token for user to make authenticated queries
    get-query-token: func(app: string, user: string) -> result<string, error>;
}

// Include this world to import the most common transact:plugin imports
world imports {
    import intf;
    import auth;
    import network;
}

//      HOOK WORLDS
//
// Include the worlds below in plugins that you are implementing, 
//   if you want to use the corresponding hook.
//
// NOTE: Currently, the following limitation applies:
//   - The transact plugin will always call the hook handler at: 
//     `<service>:plugin/transact-hook-<hook_name>`
//     Therefore, If you use any of these hooks, your plugin must be called "plugin". 

// All user auth service plugins must include this world.
world hook-user-auth {
    export transact-hook-user-auth: interface {
        use host:types/types.{error};
        use types.{claim, proof, action};
    
        /// Gets the claim needed to satisfy the authorization of the logged-in user
        on-user-auth-claim: func(account-name: string) -> result<option<claim>, error>;
    
        /// Provides proof of the user claim. 
        on-user-auth-proof: func(account-name: string, transaction-hash: list<u8>) -> result<option<proof>, error>;
    }
}

interface network {
    use host:types/types.{error};

    /// Set snapshot interval period network wide
    set-snapshot-time: func(seconds: u32) -> result<_, error>;
}

world hook-action-auth {
    import hooks;
    export transact-hook-action-auth: interface {
        use host:types/types.{error};
        use types.{claim, proof, action};
    
        /// Gets the claim(s) needed to satisfy the authorization of the sender of this transaction
        /// 
        /// Parameters
        /// * `action`: The action being added to the current transaction context
        on-action-auth-claims: func(action: action) -> result<list<claim>, error>;
    
        /// Provides proof(s) of the claim(s). 
        /// If there are multiple claims, the returned list of proofs must be in the same order as the 
        /// claims were specified.
        /// 
        /// Parameters
        /// * `claims`: The claims this transaction is attempting to satisfy
        /// * `transaction-hash`: A hash of the current transaction. Often signed to generate a proof.
        on-action-auth-proofs: func(claims: list<claim>, transaction-hash: list<u8>) -> result<list<proof>, error>;
    }
}

world hook-actions-sender {
    import hooks;
    export transact-hook-actions-sender: interface {
        use host:types/types.{error};
    
        /// Sets the sender of the specified action when added to this transaction.
        /// Return `None` if the default sender should be used.
        on-actions-sender: func(service: string, method: string) -> result<option<string>, error>;
    }
}

world hook-tx-transform {
    import hooks;
    export transact-hook-tx-transform: interface {
        use host:types/types.{error};
        use types.{action};
    
        /// Transform the set of actions in the transaction
        /// Return `None` if no transformations are needed
        on-tx-transform: func(label: option<string>, actions: list<action>) -> result<option<list<action>>, error>;
    }
}