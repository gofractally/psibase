package aes:plugin;

interface with-password {
    use host:types/types.{error};

    /// Encrypts data using a password.
    /// 
    /// Arguments:
    /// - password: The password to use for encryption
    /// - data: The data to encrypt
    /// - salt: The salt to use for encryption
    /// 
    /// Returns:
    /// - The encrypted data
    encrypt: func(password: list<u8>, data: list<u8>, salt: string) -> list<u8>;

    /// Decrypts data using a password
    /// 
    /// Arguments:
    /// - password: The password to use for decryption
    /// - cipher: The encrypted data to decrypt
    /// - salt: The salt to use for decryption
    /// 
    /// Returns:
    /// - The decrypted data
    decrypt: func(password: list<u8>, cipher: list<u8>, salt: string) -> result<list<u8>, error>;
}

interface types {
    enum strength {
        aes128,
        aes256,
    }

    record key {
        strength: strength,
        key-data: list<u8>
    }
}

interface with-key {
    use host:types/types.{error};
    use types.{key};

    /// Encrypts data using the provided 32-byte key.
    /// 
    /// Arguments:
    /// - key: The key to use for encryption
    /// - data: The data to encrypt
    /// 
    /// Returns:
    /// - The encrypted data
    encrypt: func(key: key, data: list<u8>) -> list<u8>;

    /// Decrypts data using the provided 32-byte key.
    /// 
    /// Arguments:
    /// - key: The key to use for decryption
    /// - cipher: The encrypted data to decrypt
    /// 
    /// Returns:
    /// - The decrypted data or an error if decryption fails
    decrypt: func(key: key, cipher: list<u8>) -> result<list<u8>, error>;
}

world imports {
    import with-password;
    import with-key;
}