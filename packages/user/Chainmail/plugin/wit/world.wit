package chainmail:plugin;

interface types {
    record message {
        msg-id: u64,
        receiver: string,
        sender: string,
        subject: string,
        body: string,
        // ISO 8601 datetime *with* Âµs and offset/timezone, i.e., 2001-07-08T00:34:60.026490+09:30
        datetime: string,
        is-saved-msg: bool
    }
}

interface queries {
    use host:types/types.{error};
    use types.{message};

    /// Retrieve non-archived messages
    /// - Messages can be filtered by one or both of sender and/or receiver
    get-msgs: func(sender: option<string>, receiver: option<string>) -> result<list<message>, error>;
    /// Retrieve archived messages
    /// - Messages can be filtered by one or both of sender and/or receiver
    get-archived-msgs: func(sender: option<string>, receiver: option<string>) -> result<list<message>, error>;
    /// Retrieve saved messages
    get-saved-msgs: func(receiver: option<string>) -> result<list<message>, error>;
}

interface api {
    use host:types/types.{error};

    // Send an email
    send: func(receiver: string, subject: string, body: string) -> result<_, error>;
    
    // Archive an email
    // Archiving is equivalent to deleting, given message can't be truly deleted.
    // Archiving is a proactive action equivalent to a node pruning an message (an message's historical event)
    archive: func(msg-id: u64) -> result<_, error>;
    
    // Save an email
    // Saving a message moves it to state, making it long-lasting (immune to pruning)
    save: func(msg-id: u64) -> result<_, error>;
}

world imports {
    import api;
    import queries;
}