package fractal-core:plugin;

interface user {
    use host:types/types.{error};
    start-eval: func(guild-slug: string) -> result<_, error>;

    join: func() -> result<_, error>;

    create-guild: func(display-name: string, slug: string) -> result<_, error>;

    attest: func(guild-slug: string, group-number: u32) -> result<_, error>;
    propose: func(guild-slug: string, group-number: u32, proposal: list<string>) -> result<_, error>;


    register: func(slug: string) -> result<_, error>;
    unregister: func(slug: string) -> result<_, error>;

    get-group-users: func(guild-slug: string, group-number: u32) -> result<list<string>, error>;
    get-proposal: func(guild-slug: string, group-number: u32) -> result<option<list<string>>, error>;

    apply-guild: func(guild-slug: string, app: string) -> result<_, error>;
    attest-membership-app: func(guild-slug: string, member: string, comment: string, endorses: bool) -> result<_, error>;




}

interface admin {
    use host:types/types.{error};

    set-schedule: func(guild-slug: string, registration: u32, deliberation: u32, submission: u32, finish-by: u32, interval-seconds: u32) -> result<_, error>;
    close-eval: func(guild-slug: string) -> result<_, error>;

}


world imports {
    import admin;
    import user;
}
