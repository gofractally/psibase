scalar AccountNumber

type EvaluationFinish {
    fractal: AccountNumber!
    guild: AccountNumber!
    evaluationId: Int!
}

type EvaluationFinishConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [EvaluationFinishEdge!]!
    """
    A list of nodes.
    """
    nodes: [EvaluationFinish!]!
}

"""
An edge in a connection.
"""
type EvaluationFinishEdge {
    """
    The item at the end of the edge
    """
    node: EvaluationFinish!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

type EvaluationInstance {
    guild: AccountNumber!
    interval: Int!
    evaluationId: Int!
    guildInstance: Guild!
}

type Fractal {
    account: AccountNumber!
    createdAt: TimePointSec!
    name: String!
    mission: String!
    memberships: [FractalMember!]!
}

type FractalConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [FractalEdge!]!
    """
    A list of nodes.
    """
    nodes: [Fractal!]!
}

"""
An edge in a connection.
"""
type FractalEdge {
    """
    The item at the end of the edge
    """
    node: Fractal!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

type FractalMember {
    fractal: AccountNumber!
    account: AccountNumber!
    createdAt: TimePointSec!
    memberStatus: Int!
    fractalDetails: Fractal!
}

type FractalMemberConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [FractalMemberEdge!]!
    """
    A list of nodes.
    """
    nodes: [FractalMember!]!
}

"""
An edge in a connection.
"""
type FractalMemberEdge {
    """
    The item at the end of the edge
    """
    node: FractalMember!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

type GroupFinish {
    evaluationId: Int!
    groupNumber: Int!
    users: [AccountNumber!]!
    result: [AccountNumber!]!
}

type GroupFinishConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [GroupFinishEdge!]!
    """
    A list of nodes.
    """
    nodes: [GroupFinish!]!
}

"""
An edge in a connection.
"""
type GroupFinishEdge {
    """
    The item at the end of the edge
    """
    node: GroupFinish!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

type Guild {
    account: AccountNumber!
    displayName: Memo!
    bio: Memo!
    description: String!
    evalInstance: EvaluationInstance
    fractal: Fractal!
    council: [AccountNumber!]!
    rep: GuildMember
}

type GuildApplication {
    member: AccountNumber!
    extraInfo: String!
    createdAt: TimePointSec!
    guild: Guild!
    attestations: [GuildAttest!]!
}

type GuildApplicationConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [GuildApplicationEdge!]!
    """
    A list of nodes.
    """
    nodes: [GuildApplication!]!
}

"""
An edge in a connection.
"""
type GuildApplicationEdge {
    """
    The item at the end of the edge
    """
    node: GuildApplication!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

type GuildAttest {
    member: AccountNumber!
    attestee: AccountNumber!
    comment: String!
    endorses: Boolean!
    guild: Guild!
}

type GuildConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [GuildEdge!]!
    """
    A list of nodes.
    """
    nodes: [Guild!]!
}

"""
An edge in a connection.
"""
type GuildEdge {
    """
    The item at the end of the edge
    """
    node: Guild!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

type GuildMember {
    member: AccountNumber!
    score: Int!
    pendingScore: Int
    createdAt: TimePointSec!
    guild: Guild!
}

type GuildMemberConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [GuildMemberEdge!]!
    """
    A list of nodes.
    """
    nodes: [GuildMember!]!
}

"""
An edge in a connection.
"""
type GuildMemberEdge {
    """
    The item at the end of the edge
    """
    node: GuildMember!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

scalar Memo

type NewGroup {
    owner: AccountNumber!
    evaluationId: Int!
    groupNumber: Int!
    users: [AccountNumber!]!
}

type NewGroupConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [NewGroupEdge!]!
    """
    A list of nodes.
    """
    nodes: [NewGroup!]!
}

"""
An edge in a connection.
"""
type NewGroupEdge {
    """
    The item at the end of the edge
    """
    node: NewGroup!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

"""
Information about pagination in a connection
"""
type PageInfo {
    """
    When paginating backwards, are there more items?
    """
    hasPreviousPage: Boolean!
    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean!
    """
    When paginating backwards, the cursor to continue.
    """
    startCursor: String
    """
    When paginating forwards, the cursor to continue.
    """
    endCursor: String
}

type Query {
    getGroupsCreated(
        evaluationId: Int!
        first: Int
        last: Int
        before: String
        after: String
    ): NewGroupConnection!
    evaluationFinishes(
        guild: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): EvaluationFinishConnection!
    scheduledEvaluations(
        guild: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): ScheduledEvaluationConnection!
    groupFinishes(
        evaluationId: Int!
        first: Int
        last: Int
        before: String
        after: String
    ): GroupFinishConnection!
    fractal(fractal: AccountNumber!): Fractal
    guildApplication(
        guild: AccountNumber!
        member: AccountNumber!
    ): GuildApplication
    guildApplications(
        guild: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): GuildApplicationConnection!
    guilds(
        fractal: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): GuildConnection!
    guild(guild: AccountNumber!): Guild
    scoreByMember(guild: AccountNumber!, member: AccountNumber!): GuildMember
    scores(
        guild: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): GuildMemberConnection!
    evalById(evaluationId: Int!): EvaluationInstance
    fractals(
        first: Int
        last: Int
        before: String
        after: String
    ): FractalConnection!
    fractalsList(fractals: [AccountNumber!]!): [Fractal]!
    member(fractal: AccountNumber!, member: AccountNumber!): FractalMember
    memberships(
        member: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): FractalMemberConnection!
    guildMemberships(
        member: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): GuildMemberConnection!
    members(
        fractal: AccountNumber!
        first: Int
        last: Int
        before: String
        after: String
    ): FractalMemberConnection!
}

type ScheduledEvaluation {
    fractal: AccountNumber!
    guild: AccountNumber!
    evaluationId: Int!
    registration: Int!
    deliberation: Int!
    submission: Int!
    finishBy: Int!
}

type ScheduledEvaluationConnection {
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
    """
    A list of edges.
    """
    edges: [ScheduledEvaluationEdge!]!
    """
    A list of nodes.
    """
    nodes: [ScheduledEvaluation!]!
}

"""
An edge in a connection.
"""
type ScheduledEvaluationEdge {
    """
    The item at the end of the edge
    """
    node: ScheduledEvaluation!
    """
    A cursor for use in pagination
    """
    cursor: String!
}

scalar TimePointSec

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
    query: Query
}
