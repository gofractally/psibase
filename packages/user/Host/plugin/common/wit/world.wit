package host:common;

/// Common types used by plugins
interface types {

    /// A reference to a specific plugin interface. Used for dynamically linking to other plugin functions.
    resource plugin-ref {
        constructor(service: string, plugin: string, intf: string);

        /// Gets the name of the service whose plugin is referenced
        get-service: func() -> string;

        /// Gets the name of the plugin on which the function is being called
        get-plugin: func() -> string;

        /// Gets the name of the function being called
        get-intf: func() -> string;
    }

    /// A standard error type plugins can use to propagate errors
    /// back up the callchain.
    /// 
    /// The producer field should not be relied upon for correctness.
    /// It is filled in by the plugin, which means it is possible to lie.
    /// Also it may be changed by a downstream plugin.
    record error {
        code: u32,
        producer: plugin-id,
        message: string,
    }

    /// An object that uniquely identifies a plugin
    record plugin-id {
        /// The name of a service (e.g. accounts)
        service: string,
        /// The name of the plugin (e.g. plugin.wasm)
        plugin: string,
    }

    variant body-types {
        bytes(list<u8>),
        json(string),
        text(string),
    }

    /// The object needed to specify a post request
    record post-request {

        /// The endpoint being posted to (e.g. `/graphql`)
        endpoint: string, 

        /// The body of the post request
        /// New `body` types can be added to enable posting different payloads
        body: body-types,
    }
}

/// Common calls related to interactions with the server
interface server {

    use types.{error, post-request, body-types};

    /// Used to post graphql to the server and get a JSON response back
    /// The graphql payload is automatically posted to the app's own `/graphql` endpoint.
    /// 
    /// Parameters
    /// * `graphql`: The graphql data for the request
    post-graphql-get-json: func(graphql: string) -> result<string, error>;

    /// Used to make a post request to the app's own http server.
    /// 
    /// Parameters
    /// * `request`: The required details of the post request
    post: func(request: post-request) -> result<body-types, error>;

    /// Used to call a GET endpoint on the app's own http server to retrieve a JSON
    /// payload.
    /// 
    /// Parameters
    /// * `endpoint` - The subpath being requested (e.g. `/common/tapos/head` or `/api/some-request`)
    get-json: func(endpoint: string) -> result<string, error>;

    // Todo: Probably will need to implement most/all js library functionality:
    // https://docs.psibase.io/development/front-ends/reference/js-libraries.html
}

/// Common calls related to client interactions
interface client {
    use types.{error};

    /// Gets the account name of the caller app
    get-sender: func() -> string;

    /// Gets the account name of the receiver of the current call (the account name
    ///   of the currently running app).
    get-receiver: func() -> string;

    /// Gets the URL of the specified app on the current root domain.
    get-app-url: func(app: string) -> string;
}

interface admin {
    use types.{post-request, body-types, error};
    
    /// Get account name of the active app (the top level app with which the user is interacting)
    get-active-app: func() -> string;

    /// Make a post request
    post: func(app: string, request: post-request) -> result<option<body-types>, error>;
}

/// A keyvalue interface that provides key-value operations.
/// 
/// Once a write operation completes, all subsequent read operations will return the value that 
/// was written. Another client running in a different context may or may not immediately see the 
/// result.
interface store {
    /// Database mode - Related to the conditions under which database writes will or will not succeed
    enum db-mode {
        /// Writes to a non-transactional database will persist regardless of the success or failure
        ///    of the current action. When you write, the database is immediately updated.
        non-transactional,

        /// Writes to a transactional database will automatically roll-back if the current action
        ///    fails for any reason (including the failure of a scheduled server-side transaction).
        /// NOTE: This `db-mode` is not yet supported!
        transactional
    }

    /// Database type - Related to the duration of the data in storage
    enum storage-duration {
        /// Persistent storage will last until deleted
        persistent,
        /// Session storage will be deleted at the close of a session. The duration
        ///    of a session is defined by the host platform.
        /// NOTE: `session` duration is not yet supported!
        session,
        /// Ephemeral storage will be deleted at the close of the current transaction
        ///    context.
        /// NOTE: `ephemeral` duration is not yet supported!
        ephemeral
    }

    /// Data sufficient to specify a particular database
    record database {
        mode: db-mode,
        duration: storage-duration,
    }

    /// A bucket is a collection of key-value pairs.
    resource bucket {

        /// Get a bucket from the specified database with the specified identifier
        constructor(db: database, identifier: string);

        /// Get the value associated with the specified `key`
        ///
        /// The value is returned as an option. If the key-value pair exists in the
        /// store, it returns `Ok(value)`. If the key does not exist in the
        /// store, it returns `Ok(none)`. 
        get: func(key: string) -> option<list<u8>>;

        /// Set the value associated with the key in the store. If the key already
        /// exists in the store, it overwrites the value.
        ///
        /// If the key does not exist in the store, it creates a new key-value pair.
        set: func(key: string, value: list<u8>);

        /// Delete the key-value pair associated with the key in the store.
        /// 
        /// If the key does not exist in the store, it does nothing.
        delete: func(key: string);

        /// Check if the key exists in the store.
        /// 
        /// If the key exists in the store, it returns `Ok(true)`. If the key does
        /// not exist in the store, it returns `Ok(false)`.
        exists: func(key: string) -> bool;
    }

    /// Flushes the transactional data to the host.
    /// Ephemeral and Non-Transactional databases are never flushed.
    ///
    /// This method can only be called by the transact plugin.
    flush-transactional-data: func(); 

    /// Clears all data from all buffers.
    /// Should be called at the start of every plugin execution context.
    ///
    /// This method can only be called by the transact plugin.
    clear-buffers: func();
}

world imports {
    import types;
    import server;
    import client;
    import store;
}

world privileged {
    import admin;
}
