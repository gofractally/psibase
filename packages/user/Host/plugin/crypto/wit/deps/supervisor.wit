package supervisor:bridge;

interface types {
    use host:types/types.{body-types};

    record header {
        key: string,
        value: string,
    }

    record http-request {
        uri: string,
        method: string,
        headers: list<header>,
        body: option<body-types>,
    }

    record http-response {
        status: u32,
        headers: list<header>,
        body: option<body-types>,
    }
}

interface intf {
    use host:types/types.{pem, error, plugin-id};
    use types.{http-request, http-response};

    // The top-level app through which the app is accessing psibase
    //
    // Cannot be derived from the callstack, as the supervisor is allowed
    //   to originate calls in the context of a non-supervisor root window
    //   (e.g. start-tx, finish-tx)
    get-active-app: func() -> string;

    send-request: func(req: http-request) -> result<http-response, error>;

    // The last items in the list are the most recent services in the callstack
    service-stack: func() -> list<string>;

    get-root-domain: func() -> string;

    get-chain-id: func() -> string;

    /// Signs a pre-hashed message for the DER-encoded pubKey
    sign: func(hashed-message: list<u8>, public-key: list<u8>) -> result<list<u8>, error>;

    /// Signs a pre-hashed message with the specified DER-encoded private key
    sign-explicit: func(hashed-message: list<u8>, private-key: list<u8>) -> result<list<u8>, error>;

    /// Imports a PEM-encoded private key into the keyvault.
    /// This does not change the key of any account, it simply allows AuthSig to sign
    ///   with the specified private key.
    /// Returns the corresponding public key in PEM format.
    import-key: func(private-key: pem) -> result<pem, error>;
}

interface database {
    get: func(duration: u8, key: string) -> option<list<u8>>;
    set: func(duration: u8, key: string, value: list<u8>);
    remove: func(duration: u8, key: string);
}

world imports {
    import intf;
    import database;
}
