package invite:plugin;

interface types {

    /// This is the information tracked about an invite.
    /// 
    /// Fields:
    /// * `inviter` - The account responsible for generating the invite
    /// * `expiry` - The UTC timestamp of the invite's expiration
    record invite {
        inviter: string,
        expiry: string,
    }

    type url = string;

    record new-invite-details {
        invite-id: u32,
        invite-key: list<u8>,
        encrypted-secret: string,
    }
    type invite-token = string;
    type pubkey-der = list<u8>;
}


/// Functionality exposed for the inviter
interface inviter {
    use host:types/types.{error};
    use types.{invite-token, new-invite-details};

    /// Allows a user to generate an invite token that can be used to 
    /// invite someone (with or without a preexisting account) to an 
    /// application.
    /// 
    /// Successful return value:
    ///  * `invite-token` - This token can be imported on another device to redeem the invite.
    generate-invite: func() -> result<invite-token, error>;

    /// Will prepare the information necessary to generate a new invite, but will 
    /// not actually generate it. This is used when an app wants to control the invite 
    /// creation in more detail, for example by creating the invite server-side and 
    /// registering the creator service to receive hooks when the invite gets updated.
    ///
    /// Returns:
    /// * `invite-token` - should be kept private, can be used to accept the invite
    /// * `new-invite-details` - Contains values that should be used when calling `create-invite`
    ///   on the invite service in order to correctly correspond to the `invite-token`.
    prepare-new-invite: func() -> result<tuple<invite-token, new-invite-details>, error>;

    /// Used by the creator of an invite to delete it. Deleted invites are removed
    /// from the database.
    /// 
    /// Parameters
    /// * `token`: The token that was generated during the creation of the invite.
    delete-invite: func(token: string) -> result<_, error>;
}


/// Functionality exposed for the recipient of an invite (the invitee)
interface invitee {
    use host:types/types.{error};

    use types.{invite};

    /// Imports the invite token
    /// 
    /// This will make the invite available for the active application.
    /// When an invite is available, the next account connected to the
    ///   active application will "accept" the invite.
    /// Invites also usually allow the accepter to create a new account if 
    ///   they don't yet have one.
    import-invite-token: func(token: string) -> result<u32, error>;

    /// Returns whether or not an invite is available for the active application
    is-active-invite: func() -> bool;

    /// If there is an invite available for the active application, reject it.
    /// This will make it unavailable on this device unless and until it 
    ///   is re-imported.
    reject-active-invite: func();
}

world imports {
    import inviter;
    import invitee;
}
