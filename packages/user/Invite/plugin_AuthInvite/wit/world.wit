/// This plugin facilitates the creation of the transaction that can be used to
/// submit an action to accept or reject an invite when the user has no pre-existing account.
///
/// The way it works is that when a third-party app interacts with the invite plugin to accept or 
/// reject an invite, it also notifies this auth service of the invite token that is being consumed
/// by the interaction. This auth plugin in turn notifies the transact plugin that it has a claim/proof
/// to attach to the transaction currently being constructed.
///
/// At the time of transaction construction/submission, the transact plugin will call
/// into this auth service plugin for the claims/proofs (just like any other auth service).
///
/// This auth service specifies the claim as the public key corresponding to the private key
/// in the invite, and the proof is the signature on the transaction using that same private key.
///
/// The corresponding auth service to this plugin verifies that the transaction claims to be
/// signed by a key that corresponds to a known and unused invite public key. And the verify service
/// is the same verify service used by typical p256 key verification, and it checks that the signature 
/// provided was generated with the private key corresponding to the public key specified in the claim.
package auth-invite:plugin;

interface types {
    type invite-token = string;
}

interface intf {
    use host:common/types.{error};
    use types.{invite-token};

    // Notifies this plugin that it should use the given invite token on this transaction.
    notify: func(token: invite-token) -> result<_, error>;
}

world imports {
    import intf;
}
