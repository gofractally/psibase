package permissions:plugin;

interface types {

    /// Values of this type specify a particular trust level
    /// - `none`: No meaningful risk (e.g., read-only calls on public data). Using this level
    ///   will result in an automatic approval.
    /// - `low`: Can consume client-side user resources or make some authenticated queries.
    ///   Using this level prompts the user if the caller lacks sufficient trust level.
    /// - `medium`: Can consume server-side resources or modify app-local user data. 
    ///    "app-local data" means that modifying it will not have any side-effects outside 
    ///    of your app. Using this level prompts the user if the caller lacks sufficient trust 
    ///    level.
    /// - `high`: access to data or functionality that can affect the user outside of your app
    ///    or involves other users (e.g., sending messages, updating keys, reading private user-data).
    ///    Using this level prompts the user if the caller lacks sufficient trust level.
    /// - `max`: Too much risk to be called by anyone other than you're own app. Using this
    ///    level will result in any caller except your own app being automatically denied.
    enum trust-level {
        none,
        low,
        medium,
        high,
        max
    }

    /// Descriptions for low, medium, and high trust (respectively) in the context of your
    ///   app. These are shown to the user to help them determine if they should trust the 
    ///   requesting app.
    type descriptions = tuple<string, string, string>;
}

interface api {
    use host:types/types.{error};
    use types.{trust-level, descriptions};

    /// When an app 'A' calls into an app 'B', and B calls into the permissions plugin to authorize the call,
    ///   app A is known as the "caller" app. This plugin restricts callers so that they are either:
    ///     * The currently active application, or
    ///     * An explicitly set "allowed caller"
    /// This function allows the active app to set the list of allowed callers.
    /// It can only be called by the active app.
    /// The list is stored permanently until deleted by the active app.
    ///   To delete, the active app can call this function with an empty list.
    ///
    /// The intention behind this restriction is so that the user is only presented for requests to authorize
    ///   apps with which they are familiar. That is why the active app is always whitelisted (the user is using
    ///   the active app, and is therefore familiar with it). 
    set-allowed-callers: func(callers: list<string>);

    /// The caller of this function (the "callee") wants to check if the user has granted the specified `caller`
    ///     a sufficient permission level to use callee's plugin on the user's behalf. If the caller has insufficient 
    ///     permission, this function will cause the user to be prompted to consider the request.
    /// 
    /// On successful execution, the return value represents whether the user is authorized or not.
    /// 
    /// # Arguments
    ///
    /// - `caller`: The app requesting permission.
    /// - `level`: The level of trust needed for a third-party application to perform this action
    ///   on the user's behalf.
    /// - `debug_label`: If an unexpected error occurs, this label will be printed with the error
    ///   message to help track down the root cause.
    /// - `descriptions`: A list of descriptions that help the user know what capabilities they will be
    ///   granting the requesting application should they approve the request.
    /// - `whitelist`: A list of accounts who are pre-authorized to perform this action.
    ///   These accounts are not generally authorized at the specified `trust` level but will pass this check.
    authorize: func(caller: string, level: trust-level, descriptions: descriptions, debug-label: string, whitelist: list<string>) -> result<bool, error>;
}

world imports {
    import api;
    import types;
}
