import {
    QualifiedDynCallArgs,
    QualifiedFunctionCallArgs,
    QualifiedResourceCallArgs,
} from "@psibase/common-lib";

export interface HttpRequest {
    uri: string;
    method: string;
    headers: { key: string; value: string }[];
    body?: BodyType;
}

export interface HttpResponse {
    status: number;
    headers: { key: string; value: string }[];
    body: BodyType | null;
}

export interface BodyType {
    tag: string;
    val: Uint8Array | string;
}

export interface PluginPostDetails {
    endpoint: string;
    headers: [string, string][];
    body: BodyType;
}

// This is the interface linked to the host plugin
export interface HostInterface {
    // Get the value associated with the specified `key`
    //
    // If the key-value pair exists, return it. Otherwise, it returns null.
    dbGet: (duration: number, key: string) => Uint8Array | null;

    // Set the value associated with the key in the store. If the key already
    // exists in the store, it overwrites the value.
    //
    // If the key does not exist in the store, it creates a new key-value pair.
    dbSet: (duration: number, key: string, value: Uint8Array) => void;

    // Delete the key-value pair associated with the key in the store.
    //
    // If the key does not exist in the store, it does nothing.
    dbRemove: (duration: number, key: string) => void;

    // Get the chain ID of the current chain to which this host is connected.
    getChainId: () => string;

    // Interface for the autogenerated proxy package
    syncCall: (args: QualifiedFunctionCallArgs) => any;

    syncCallResource: (args: QualifiedResourceCallArgs) => any;

    syncCallDyn: (args: QualifiedDynCallArgs) => any;

    // Send an HTTP request and get the response (synchronously)
    sendRequest: (req: HttpRequest) => HttpResponse;

    // Get the service name from each level of the callstack
    getServiceStack(): string[];

    // Get the root domain of the node to which this host is connected
    getRootDomain(): string;

    // Show the active prompt to the user
    requestPrompt: () => void;

    // Import a private key
    importKey(privateKey: string): string;

    // Sign with this private-key
    signExplicit(preimage: Uint8Array, privateKey: string): Uint8Array;

    // Sign with the private key associated with this public-key
    sign(preimage: Uint8Array, publicKey: string): Uint8Array;
}
