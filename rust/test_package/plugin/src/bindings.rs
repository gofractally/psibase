// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod host {
    pub mod common {
        #[allow(clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// An object that uniquely identifies a plugin
            #[derive(Clone)]
            pub struct PluginId {
                /// The name of a service (e.g. accounts)
                pub service: _rt::String,
                /// The name of the plugin (e.g. plugin.wasm)
                pub plugin: _rt::String,
            }
            impl ::core::fmt::Debug for PluginId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PluginId")
                        .field("service", &self.service)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            /// A standard error type plugins can use to propagate errors
            /// back up the callchain.
            ///
            /// The producer field should not be relied upon for correctness.
            /// It is filled in by the plugin, which means it is possible to lie.
            /// Also it may be changed by a downstream plugin.
            #[derive(Clone)]
            pub struct Error {
                pub code: u32,
                pub producer: PluginId,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &self.code)
                        .field("producer", &self.producer)
                        .field("message", &self.message)
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
            /// Data related to the origination of the current call
            #[derive(Clone)]
            pub struct OriginationData {
                /// The account name of the psibase app responsible for the call.
                /// May be empty if the call comes from an external web app.
                pub app: Option<_rt::String>,
                /// The domain origin responsible for the call.
                pub origin: _rt::String,
            }
            impl ::core::fmt::Debug for OriginationData {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("OriginationData")
                        .field("app", &self.app)
                        .field("origin", &self.origin)
                        .finish()
                }
            }
        }

        #[allow(clippy::all)]
        pub mod server {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::host::common::types::Error;
            #[allow(unused_unsafe, clippy::all)]
            /// Adds the specified service action to the current transaction.
            ///
            /// No service is specified, as it is only possible for a plugin to call an
            /// action on its own service. To call actions on another service, it must use
            /// that service's plugin.
            ///
            /// Parameters
            /// * `action`: The name of the action being called
            /// * `args`: The arguments for the action, packed into fracpack format
            pub fn add_action_to_transaction(action: &str, args: &[u8]) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let vec0 = action;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = args;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "host:common/server")]
                    extern "C" {
                        #[link_name = "add-action-to-transaction"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<i32>();
                                let l5 = *ptr2.add(8).cast::<*mut u8>();
                                let l6 = *ptr2.add(12).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                let l8 = *ptr2.add(16).cast::<*mut u8>();
                                let l9 = *ptr2.add(20).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                                let l11 = *ptr2.add(24).cast::<*mut u8>();
                                let l12 = *ptr2.add(28).cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(l11.cast(), len13, len13);

                                super::super::super::host::common::types::Error {
                                    code: l4 as u32,
                                    producer: super::super::super::host::common::types::PluginId {
                                        service: _rt::string_lift(bytes7),
                                        plugin: _rt::string_lift(bytes10),
                                    },
                                    message: _rt::string_lift(bytes13),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Used to post graphql to the server and get a JSON response back
            /// The graphql payload is automatically posted to the app's own `/graphql` endpoint.
            ///
            /// Parameters
            /// * `graphql`: The graphql data for the request
            pub fn post_graphql_get_json(graphql: &str) -> Result<_rt::String, Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let vec0 = graphql;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "host:common/server")]
                    extern "C" {
                        #[link_name = "post-graphql-get-json"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(4).cast::<i32>();
                                let l7 = *ptr1.add(8).cast::<*mut u8>();
                                let l8 = *ptr1.add(12).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                                let l10 = *ptr1.add(16).cast::<*mut u8>();
                                let l11 = *ptr1.add(20).cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                                let l13 = *ptr1.add(24).cast::<*mut u8>();
                                let l14 = *ptr1.add(28).cast::<usize>();
                                let len15 = l14;
                                let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                super::super::super::host::common::types::Error {
                                    code: l6 as u32,
                                    producer: super::super::super::host::common::types::PluginId {
                                        service: _rt::string_lift(bytes9),
                                        plugin: _rt::string_lift(bytes12),
                                    },
                                    message: _rt::string_lift(bytes15),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
pub mod exports {
    pub mod test_package {
        pub mod plugin {
            #[allow(clippy::all)]
            pub mod test {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Error = super::super::super::super::host::common::types::Error;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_foo_cabi<T: Guest>() -> *mut u8 {
                    let result0 = T::foo();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::host::common::types::Error {
                                code: code2,
                                producer: producer2,
                                message: message2,
                            } = e;
                            *ptr1.add(4).cast::<i32>() = _rt::as_i32(code2);
                            let super::super::super::super::host::common::types::PluginId {
                                service: service3,
                                plugin: plugin3,
                            } = producer2;
                            let vec4 = (service3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1.add(12).cast::<usize>() = len4;
                            *ptr1.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = (plugin3.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr1.add(20).cast::<usize>() = len5;
                            *ptr1.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = (message2.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr1.add(28).cast::<usize>() = len6;
                            *ptr1.add(24).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_foo<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0.add(16).cast::<*mut u8>();
                            let l4 = *arg0.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = *arg0.add(24).cast::<*mut u8>();
                            let l6 = *arg0.add(28).cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn foo() -> Result<(), Error>;
                }
                #[doc(hidden)]

                macro_rules! __export_test_package_plugin_test_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "test-package:plugin/test#foo"]
          unsafe extern "C" fn export_foo() -> *mut u8 {
            $($path_to_types)*::_export_foo_cabi::<$ty>()
          }
          #[export_name = "cabi_post_test-package:plugin/test#foo"]
          unsafe extern "C" fn _post_return_foo(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_foo::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_test_package_plugin_test_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 32]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 32]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_psibase_plugin_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::test_package::plugin::test::__export_test_package_plugin_test_cabi!($ty with_types_in $($path_to_types_root)*::exports::test_package::plugin::test);
  )
}
#[doc(inline)]
pub(crate) use __export_psibase_plugin_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:psibase-plugin:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 539] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x96\x03\x01A\x02\x01\
A\x07\x01B\x07\x01r\x02\x07services\x06plugins\x04\0\x09plugin-id\x03\0\0\x01r\x03\
\x04codey\x08producer\x01\x07messages\x04\0\x05error\x03\0\x02\x01ks\x01r\x02\x03\
app\x04\x06origins\x04\0\x10origination-data\x03\0\x05\x03\x01\x11host:common/ty\
pes\x05\0\x02\x03\0\0\x05error\x01B\x09\x02\x03\x02\x01\x01\x04\0\x05error\x03\0\
\0\x01p}\x01j\0\x01\x01\x01@\x02\x06actions\x04args\x02\0\x03\x04\0\x19add-actio\
n-to-transaction\x01\x04\x01j\x01s\x01\x01\x01@\x01\x07graphqls\0\x05\x04\0\x15p\
ost-graphql-get-json\x01\x06\x03\x01\x12host:common/server\x05\x02\x01B\x05\x02\x03\
\x02\x01\x01\x04\0\x05error\x03\0\0\x01j\0\x01\x01\x01@\0\0\x02\x04\0\x03foo\x01\
\x03\x04\x01\x18test-package:plugin/test\x05\x03\x04\x01\"test-package:plugin/ps\
ibase-plugin\x04\0\x0b\x14\x01\0\x0epsibase-plugin\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
