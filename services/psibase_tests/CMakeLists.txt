enable_testing()

function(service name suffix)
    add_executable(${name}${suffix} ${ARGN})
    target_include_directories(${name}${suffix} PUBLIC include)
    target_link_libraries(${name}${suffix} services_system${suffix} services_user${suffix} services_test psibase-service-simple-malloc${suffix} )
    set_target_properties(${name}${suffix} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${ROOT_BINARY_DIR})
    if(TEST_GENERATE_SCHEMA)
        psibase_schema(${name}${suffix})
    endif()
endfunction()

function(add suffix)
    service(TestClock "${suffix}" src/TestClock.cpp)
    service(TestKV "${suffix}" src/TestKV.cpp)
    service(TestMemo "${suffix}" src/TestMemo.cpp)
    service(TestServiceEntry "${suffix}" src/TestServiceEntry.cpp)
    service(TestTable "${suffix}" src/TestTable.cpp)

    service(AbortService "${suffix}" src/AbortService.cpp)
    service(EmitEvents "${suffix}" src/EmitEvents.cpp)
    service(RemoveCode "${suffix}" src/RemoveCode.cpp)
    service(SubjectiveDb "${suffix}" src/SubjectiveDb.cpp)

    set(TEST_GENERATE_SCHEMA 1)
    service(MockCpuLimit "${suffix}" src/MockCpuLimit.cpp)
    service(PSubjectiveService "${suffix}" src/ParallelSubjectiveService.cpp)
    service(CounterService "${suffix}" src/CounterService.cpp)
    service(AsyncQueryService "${suffix}" src/AsyncQueryService.cpp)
    service(SubjectiveCounterService "${suffix}" src/SubjectiveCounterService.cpp)
    service(KeepSocketService "${suffix}" src/KeepSocketService.cpp)
    service(SocketListService "${suffix}" src/SocketListService.cpp)

    add_executable(psibase-tests${suffix} test.cpp test-sig.cpp test_event.cpp test_crypto.cpp test_memo.cpp test_clock.cpp test_semver.cpp test_subjective.cpp testKvMerkle.cpp test_rpc.cpp test_verify_services.cpp)
    target_include_directories(psibase-tests${suffix} PUBLIC include)
    target_link_libraries(psibase-tests${suffix} services_system${suffix} psitestlib${suffix} catch2)
    set_target_properties(psibase-tests${suffix} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${ROOT_BINARY_DIR})
endfunction(add)

add_library(services_test INTERFACE)
target_include_directories(services_test INTERFACE ../psibase_tests ../psibase_tests/include)

if(DEFINED IS_WASM)
    conditional_add()
    add_wasm_test_release(psibase-tests)
    configure_file(semver.json ${ROOT_BINARY_DIR}/semver.json COPYONLY)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS on)
