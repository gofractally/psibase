package accounts:plugin;

interface types {
    record account {
        account-num: string,
        auth-service: string,
        resource-balance: option<u64>,
    }
}

/// This interface is only available to the top-level app, or its plugin.
/// The "top-level" app is the app with which the user is directly interacting.
interface active-app {
    use host:common/types.{error};

    /// Directly log in a user by their account name.
    /// The user must have already been connected to the app.
    login: func(user: string) -> result<_, error>;

    /// Logs out the currently logged-in user.
    logout: func() -> result<_, error>;

    /// Retrieves a list of accounts that the user has connected to this app.
    /// The user may only log in to accounts that have been connected.
    get-connected-accounts: func() -> result<list<string>, error>;

    /// Create a connection token. This is passed to the `accounts` login page to allow it to link 
    /// a new account to your app.
    create-connection-token: func() -> result<string, error>;
}

/// This is the typical API intended to be used by third-party plugins or UIs.
interface api {
    use host:common/types.{error};
    use types.{account};

    /// Returns true if there is a user logged in to the currently active top-level application.
    is-logged-in: func() -> bool;

    /// Gets the account details for the specified account name.
    /// Possible responses:
    /// - Some(Account) - The account name is valid and exists with specified details
    /// - None - The account name is valid but has not been created
    /// - [Error] InvalidAccountName - The account name is not a valid psibase account name
    get-account: func(name: string) -> result<option<account>, error>;

    /// Sets the auth service used to authenticate the currently logged-in user
    /// Currently calling this is restricted to the homepage app.
    set-auth-service: func(service-name: string) -> result<_, error>; 

    /// Gets the account name of the user logged into the active application.
    /// May also return None if no user is logged in.
    get-current-user: func() -> option<string>;
}

world imports {
    import api;
    import active-app;
}
