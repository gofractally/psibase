package accounts:plugin;

/// This interface is only accessible to the supervisor.
interface admin {
    use host:common/types.{error};

    /// Forces `user` to get logged into the app at domain `domain`.
    force-login: func(domain: string, user: string);

    /// Logins on a per-app basis break the ability for plugins to ask who is currently 
    ///   logged in. Therefore, they can only ask through the host, which is the entity 
    ///   that reliably knows the domain of the top-level app into which the user is 
    ///   interacting.
    /// 
    /// Parameters: 
    ///  * `caller-app` - The supervisor will always be the actual caller of the function, 
    ///                   but this parameter specifies the account of the app who originally 
    ///                   prompted the supervisor to ask.
    ///  * `domain`     - The domain of the app whose logged-in user is being requested.
    get-logged-in-user: func(caller-app: string, domain: string) -> result<option<string>, error>;
}

world impl {
    include host:common/imports;
    include host:privileged/imports;
    include clientdata:plugin/imports;
    include transact:plugin/imports;

    export admin;
    export accounts;
}
