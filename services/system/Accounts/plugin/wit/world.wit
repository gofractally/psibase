package accounts:plugin;

interface types {
    record account {
        account-num: string,
        auth-service: string,
        resource-balance: option<u64>,
    }
}

interface accounts {
    use host:common/types.{error};
    use types.{account};

    /// Creates a login popup allowing the user to log into an account.
    login: func() -> result<_, error>;

    /// Logs out the currently logged-in user.
    logout: func() -> result<_, error>;

    /// Temporary function that will be deprecated once popup login windows are supported.
    /// This function will log in the specified user with zero error checking.
    login-temp: func(user: string) -> result<_, error>;

    /// Returns true if there is a user logged in to the currently active top-level application.
    /// Unlike get-logged-in-user, this function is callable by any plugin because it does not
    /// leak any private information, and only notifies the caller whether there is a user logged in.
    is-logged-in: func() -> bool;

    /// Gets the account name of the user logged into the currently active top-level application.
    /// May also return None if no user is logged in.
    /// 
    /// Note: This function is only callable by the top-level app, or its plugin, or other 
    ///   privileged system plugins such as supervisor and transact.
    get-logged-in-user: func() -> result<option<string>, error>;

    /// Retrieves a list of accounts to which the user can log in.
    get-available-accounts: func() -> result<list<string>, error>;

    /// Gets the account details for the specified account name (if it exists)
    /// Returns None if the account does not exist.
    get-account: func(name: string) -> result<option<account>, error>;

    /// Adds a new auth service locally that can be used to authenticate
    /// a user.
    add-auth-service: func(service-name: string) -> result<_, error>;

    /// Sets the auth service used to authenticate the currently logged-in user
    set-auth-service: func(service-name: string) -> result<_, error>;
}

world imports {
    import accounts;
}
