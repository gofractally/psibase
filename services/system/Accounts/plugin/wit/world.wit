package accounts:plugin;

interface types {
    record account-number {
        value: u64,
    }

    record resource-limit {
        value: u64,
    }

    record account {
        account-num: account-number,
        auth-service: account-number,
        resource-balance: option<resource-limit>,
    }
}

interface accounts {
    use host:common/types.{error};
    use types.{account};

    /// Creates a login popup allowing the user to log into an account.
    login: func() -> result<_, error>;

    /// Gets the name of the currently logged in user, if there is one.
    /// Returned option can be empty if there is no currently logged in user.
    get-logged-in-user: func() -> result<option<string>, error>;

    /// Retrieves a list of accounts to which the user can log in.
    get-available-accounts: func() -> result<list<string>, error>;
    
    /// Verifies an account name corresponds with an existing account
    get-account: func(name: string) -> result<option<account>, error>;

    /// Adds a new auth service locally that can be used to authenticate
    /// a user.
    add-auth-service: func(service-name: string) -> result<_, error>;

    /// Sets the auth service used to authenticate the currently logged-in user
    set-auth-service: func(service-name: string) -> result<_, error>;
}

world psibase-plugin {
    import host:common/server;
    export accounts;
}

