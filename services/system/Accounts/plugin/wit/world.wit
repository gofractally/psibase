package accounts:plugin;

interface types {
    use host:common/types.{origination-data};

    record account {
        account-num: string,
        auth-service: string,
        resource-balance: option<u64>,
    }

    type app-details = origination-data;
}

/// This interface is only available to the top-level app, or its plugin.
/// The "top-level" app is the app with which the user is directly interacting.
interface active-app {
    use host:common/types.{error};
    
    /// Temporary function that will be deprecated once popup login windows are supported.
    /// This function will log in the specified user with zero error checking.
    login: func(user: string) -> result<_, error>;

    /// Logs out the currently logged-in user.
    logout: func() -> result<_, error>;

    /// Gets the account name of the user logged into the currently active application.
    /// May also return None if no user is logged in.
    /// 
    /// Note: In most cases, this should only be called from a UI. A plugin should typically 
    ///  only care about the calling *app*, not the user currently logged in to the calling app.
    ///  If you're looking for the calling app, use `host:common/client.get-sender-app()`. If 
    ///  your plugin must use get-logged-in-user, carefully consider how it will affect a 
    ///  third-party integration with your plugin.
    get-logged-in-user: func() -> result<option<string>, error>;

    /// Retrieves a list of accounts to which the user can log in.
    get-connected-accounts: func() -> result<list<string>, error>;

    /// Create a connection token. This is passed to the `accounts` login page to allow it to link 
    /// a new account to your app.
    create-connection-token: func() -> result<string, error>;
}

/// This is the typical API intended to be used by third-party plugins or UIs.
interface api {
    use host:common/types.{error};
    use types.{account, app-details};

    /// Returns true if there is a user logged in to the currently active top-level application.
    /// Unlike get-logged-in-user, this function is callable by any plugin because it does not
    /// leak any private information, and only notifies the caller whether there is a user logged in.
    is-logged-in: func() -> bool;

    /// Gets the account details for the specified account name (if it exists)
    /// Returns None if the account does not exist.
    get-account: func(name: string) -> result<option<account>, error>;

    /// Sets the auth service used to authenticate the currently logged-in user
    /// Currently calling this is restricted to the homepage app.
    set-auth-service: func(service-name: string) -> result<_, error>;
}

world imports {
    import api;
    import active-app;
}
