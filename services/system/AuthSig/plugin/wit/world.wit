package auth-sig:plugin;

/// Common types used when dealing with auth service plugins
interface types {

    /// PEM type is just a string
    type pem = string;

    /// This represents a keypair of the specified type.
    /// The public and private keys are encoded in PEM format.
    record keypair {
        public-key: pem,
        private-key: pem,
    }
}

/// Methods related to key management
interface keyvault {
    use host:common/types.{error};
    use types.{keypair, pem};

    /// Generates a new keypair managed by this auth plugin.
    /// It stores the private key and returns the public key in pem format.
    generate-keypair: func() -> result<pem, error>;

    /// Generates a new keypair that is unmanaged (nothing is stored).
    /// The full keypair is returned to the caller.
    generate-unmanaged-keypair: func() -> result<keypair, error>;

    /// Returns the public key corresponding to the specified
    /// private key.
    pub-from-priv: func(private-key: pem) -> result<pem, error>;

    /// Returns the DER encoded key
    to-der: func(key: pem) -> result<list<u8>, error>;

    /// Signs a pre-hashed message with the specified DER-encoded private key
    sign: func(hashed-message: list<u8>, private-key: list<u8>) -> result<list<u8>, error>;
}

interface actions {
    use types.{pem};
    use host:common/types.{error};

    /// Updates the key used by the current user to the specified public key
    /// The specified public key should be the PEM representation of the public key
    set-key: func(public-key: pem) -> result<_, error>;
}

world imports {
    // All auth services provide the standard smart-auth interface
    import keyvault;
    import actions;
}