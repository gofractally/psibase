package auth-sig:plugin;

/// Common types used when dealing with auth service plugins
interface types {

    /// A list of `claim` objects is added to every submitted transaction.
    /// A claim is something the submitter of a transaction claims to know (e.g. a public key)
    record claim {
        /// The name of the service used to verify the claim is valid
        verify-service: string,
        /// The raw claim data
        raw-data: list<u8>,
    }

    /// A list of `proof` is attached
    record proof {
        signature: list<u8>,
    }

    /// PEM type is just a string
    type pem = string;

    /// This represents a keypair of the specified type.
    /// The public and private keys are encoded in PEM format.
    record keypair {
        public-key: pem,
        private-key: pem,
    }
}

/// Methods related to psibase smart authorization
/// Every auth service must export this interface
interface smart-auth {
    use host:common/types.{error};
    use types.{claim, proof};

    /// Gets the claim needed for this user to satisfy the authorization check
    get-claim: func() -> result<claim, error>;

    /// Provides proof of the claim. 
    /// 
    /// Parameters
    /// * `message`: A message that usually needs to be signed as
    ///   proof of the claim.
    get-proof: func(message: list<u8>) -> result<proof, error>;
}

/// Methods related to key management
interface keyvault {
    use host:common/types.{error};
    use types.{keypair, pem};

    /// Generates a new keypair managed by this auth plugin.
    /// It stores the private key and returns the public key in pem format.
    generate-keypair: func() -> result<pem, error>;

    /// Generates a new keypair that is unmanaged (nothing is stored).
    /// The full keypair is returned to the caller.
    generate-unmanaged-keypair: func() -> result<keypair, error>;

    /// Returns the public key corresponding to the specified
    /// private key.
    pub-from-priv: func(private-key: pem) -> result<pem, error>;

    /// Returns the DER encoded key
    to-der: func(key: pem) -> result<list<u8>, error>;
}

interface actions {
    use types.{pem};
    use host:common/types.{error};

    /// Updates the key used by the current user to the specified public key
    /// The specified public key should be the PEM representation of the public key
    set-key: func(public-key: pem) -> result<_, error>;
}

world imports {
    import smart-auth;
    import keyvault;
    import actions;
}