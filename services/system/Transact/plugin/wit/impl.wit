package transact:plugin;

interface admin {
    use host:common/types.{error};

    /// Opens a new tx context. Adding actions using add-action-to-transaction will 
    /// refer to this open context.
    start-tx: func();

    /// Closes the current transaction context, constructs and submits the final 
    /// signed transaction.
    finish-tx: func() -> result<_, error>;
}


interface hook-handlers {
    use host:common/types.{error, plugin-ref};
    use types.{claim, proof, action};

    on-user-auth-claim: func(plugin: plugin-ref, account-name: string) -> result<option<claim>, error>;
    on-user-auth-proof: func(plugin: plugin-ref, account-name: string, transaction-hash: list<u8>) -> result<option<proof>, error>;

    on-action-auth-claims: func(plugin: plugin-ref, action: action) -> result<list<claim>, error>;
    on-action-auth-proofs: func(plugin: plugin-ref, claims: list<claim>, transaction-hash: list<u8>) -> result<list<proof>, error>;

    on-action-sender: func(plugin: plugin-ref, service: string, method: string) -> result<option<string>, error>;

    on-tx-transform: func(plugin: plugin-ref, label: option<string>, actions: list<action>) -> result<option<list<action>>, error>;
}

world impl {
    include host:common/imports;
    include clientdata:plugin/imports;
    include accounts:plugin/imports;

    export admin;
    export intf;

    import hook-handlers;
    export hooks;
}
