package chainmail:plugin;

interface types {
    record message {
        msg-id: u64,
        receiver: string,
        sender: string,
        subject: string,
        body: string,
        // ISO 8601 datetime *with* Âµs and offset/timezone, i.e., 2001-07-08T00:34:60.026490+09:30
        datetime: string,
        is-saved-msg: bool
    }
}

interface queries {
    use host:common/types.{error};
    use types.{message};

    /// Retrieve non-archived messages
    /// - Messages can be filtered by one or both of sender and/or receiver
    get-msgs: func(sender: option<string>, receiver: option<string>) -> result<list<message>, error>;
    /// Retrieve archived messages
    /// - Messages can be filtered by one or both of sender and/or receiver
    get-archived-msgs: func(sender: option<string>, receiver: option<string>) -> result<list<message>, error>;
    /// Retrieve saved messages
    get-saved-msgs: func(receiver: option<string>) -> result<list<message>, error>;
}

interface api {
    use host:common/types.{error};

    /// Sets a private message key for the current user, allowing them to
    /// receive private messages from other users.
    /// Does nothing if the current user already has a private message key.
    enable-private-messaging: func();

    /// Rotates the currently logged-in user's private messaging key.
    rotate-pm-key: func();

    /// Send a public message
    send: func(receiver: string, subject: string, body: string) -> result<_, error>;

    /// Archive a public message
    /// A message cannot be deleted (since it's a historical event), but it can be 
    /// archived to prevent seeing it in the inbox.
    archive: func(msg-id: u64) -> result<_, error>;
    
    /// Save a public message by storing it in state, which will prevent it from being pruned
    /// even if the event log is pruned.
    save: func(msg-id: u64) -> result<_, error>;
}

interface groups {
    use host:common/types.{error};

    create-group: func(members: list<string>, expiry: option<string>, name: option<string>, description: option<string>) -> result<_, error>;
    delete-group: func(id: string) -> result<_, error>;
    send-to-group: func(id: string, subject: string, body: string) -> result<_, error>;
    rotate-key: func(id: string) -> result<_, error>;
}

world imports {
    import api;
    import queries;
    import groups;
}