package host:common;

/// Common types used by plugins
interface types {

    /// A reference to a plugin. Used for dynamically linking to a plugin.
    resource plugin-ref {
        constructor(name: string);
    }

    /// A standard error type plugins can use to propagate errors
    /// back up the callchain.
    /// 
    /// The producer field should not be relied upon for correctness.
    /// It is filled in by the plugin, which means it is possible to lie.
    /// Also it may be changed by a downstream plugin.
    record error {
        code: u32,
        producer: plugin-id,
        message: string,
    }

    /// An object that uniquely identifies a plugin
    record plugin-id {
        /// The name of a service (e.g. accounts)
        service: string,
        /// The name of the plugin (e.g. plugin.wasm)
        plugin: string,
    }

    /// Data related to the origination of the current call
    record origination-data {

        /// The account name of the psibase app responsible for the call.
        /// May be empty if the call comes from an external web app.
        app: option<string>,

        /// The domain origin responsible for the call.
        origin: string
    }

    variant body-types {
        bytes(list<u8>),
        json(string),
    }

    /// The object needed to specify a post request
    record post-request {

        /// The endpoint being posted to (e.g. `/graphql`)
        endpoint: string, 

        /// The body of the post request
        /// New `body` types can be added to enable posting different payloads
        body: body-types,
    }
}

/// Common calls related to interactions with the server
interface server {

    use types.{error, post-request};

    /// Used to post graphql to the server and get a JSON response back
    /// The graphql payload is automatically posted to the app's own `/graphql` endpoint.
    /// 
    /// Parameters
    /// * `graphql`: The graphql data for the request
    post-graphql-get-json: func(graphql: string) -> result<string, error>;

    /// Used to make a post request to the app's own http server.
    /// 
    /// Parameters
    /// * `request`: The required details of the post request
    post: func(request: post-request) -> result<string, error>;

    /// Used to call a GET endpoint on the app's own http server to retrieve a JSON
    /// payload.
    /// 
    /// Parameters
    /// * `endpoint` - The subpath being requested (e.g. `/common/tapos/head` or `/api/some-request`)
    get-json: func(endpoint: string) -> result<string, error>;

    // Todo: Probably will need to implement most/all js library functionality:
    // https://docs.psibase.io/development/front-ends/reference/js-libraries.html
}

/// Common calls related to client interactions
interface client {
    use types.{origination-data, error};

    /// Gets details about the app responsible for the call
    get-sender-app: func() -> origination-data;

    /// Gets the account name of the user logged into the current top-level application
    get-logged-in-user: func() -> result<option<string>, error>;

    /// Gets the account name of the service from which the currently running
    /// plugin was fetched.
    my-service-account: func() -> string;

    /// Gets the full domain origin of the service from which the
    /// currently running plugin was fetched.
    my-service-origin: func() -> string;
}

world imports {
    import types;
    import server;
    import client;
}
