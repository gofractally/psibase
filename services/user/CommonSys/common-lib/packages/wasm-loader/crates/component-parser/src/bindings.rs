// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod psibase {
    pub mod component_parser {
      
      #[allow(clippy::all)]
      pub mod provider {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        /// Represents a kind of import or export in a WebAssembly component.
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum ItemKind {
          /// The item is a core module.
          Module,
          /// The item is a function.
          Function,
          /// The item is a value.
          Value,
          /// The item is a type.
          Type,
          /// The item is an instance.
          Instance,
          /// The item is a component.
          Component,
        }
        impl ::core::fmt::Debug for ItemKind {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              ItemKind::Module => {
                f.debug_tuple("ItemKind::Module").finish()
              }
              ItemKind::Function => {
                f.debug_tuple("ItemKind::Function").finish()
              }
              ItemKind::Value => {
                f.debug_tuple("ItemKind::Value").finish()
              }
              ItemKind::Type => {
                f.debug_tuple("ItemKind::Type").finish()
              }
              ItemKind::Instance => {
                f.debug_tuple("ItemKind::Instance").finish()
              }
              ItemKind::Component => {
                f.debug_tuple("ItemKind::Component").finish()
              }
            }
          }
        }
        
        impl ItemKind{
          pub(crate) unsafe fn _lift(val: u8) -> ItemKind{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => ItemKind::Module,
              1 => ItemKind::Function,
              2 => ItemKind::Value,
              3 => ItemKind::Type,
              4 => ItemKind::Instance,
              5 => ItemKind::Component,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        /// Represents an import in a WebAssembly component.
        #[derive(Clone)]
        pub struct Import {
          /// The import name.
          pub name: wit_bindgen::rt::string::String,
          /// The import kind.
          pub kind: ItemKind,
        }
        impl ::core::fmt::Debug for Import {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Import").field("name", &self.name).field("kind", &self.kind).finish()
          }
        }
        /// Represents an export in a WebAssembly component.
        #[derive(Clone)]
        pub struct Export {
          /// The export name.
          pub name: wit_bindgen::rt::string::String,
          /// The export kind.
          pub kind: ItemKind,
        }
        impl ::core::fmt::Debug for Export {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Export").field("name", &self.name).field("kind", &self.kind).finish()
          }
        }
        /// Represents a WebAssembly component.
        #[derive(Clone)]
        pub struct Component {
          /// The name of the component.
          pub name: wit_bindgen::rt::string::String,
          /// The imports of the component.
          pub imports: wit_bindgen::rt::vec::Vec::<Import>,
          /// The exports of the component.
          pub exports: wit_bindgen::rt::vec::Vec::<Export>,
          /// The WIT definition of the component's world.
          pub wit: wit_bindgen::rt::string::String,
        }
        impl ::core::fmt::Debug for Component {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Component").field("name", &self.name).field("imports", &self.imports).field("exports", &self.exports).field("wit", &self.wit).finish()
          }
        }
        
        pub use super::super::super::super::super::ComponentParser as ComponentParser;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "psibase:component-parser/provider#[dtor]component-parser"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<ComponentParser>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for ComponentParser{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]psibase:component-parser/provider")]
              extern "C" {
                #[link_name = "[resource-new]component-parser"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]psibase:component-parser/provider")]
              extern "C" {
                #[link_name = "[resource-rep]component-parser"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnComponentParser = wit_bindgen::rt::Resource<ComponentParser>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for ComponentParser{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]psibase:component-parser/provider")]
              extern "C" {
                #[link_name = "[resource-drop]component-parser"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "psibase:component-parser/provider#[method]component-parser.parse"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_component_parser_parse(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg2 as usize;
            let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
            let len1 = arg4 as usize;
            let result2 = <_ComponentParserImpl as GuestComponentParser>::parse(wit_bindgen::rt::Resource::<ComponentParser>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), Vec::from_raw_parts(arg3 as *mut _, len1, len1));
            let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
            match result2 {
              Ok(e) => { {
                *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                let Component{ name:name4, imports:imports4, exports:exports4, wit:wit4, } = e;
                let vec5 = (name4.into_bytes()).into_boxed_slice();
                let ptr5 = vec5.as_ptr() as i32;
                let len5 = vec5.len() as i32;
                ::core::mem::forget(vec5);
                *((ptr3 + 8) as *mut i32) = len5;
                *((ptr3 + 4) as *mut i32) = ptr5;
                let vec8 = imports4;
                let len8 = vec8.len() as i32;
                let layout8 = alloc::Layout::from_size_align_unchecked(vec8.len() * 12, 4);
                let result8 = if layout8.size() != 0
                {
                  let ptr = alloc::alloc(layout8);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout8);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec8.into_iter().enumerate() {
                  let base = result8 as i32 + (i as i32) * 12;
                  {
                    let Import{ name:name6, kind:kind6, } = e;
                    let vec7 = (name6.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr() as i32;
                    let len7 = vec7.len() as i32;
                    ::core::mem::forget(vec7);
                    *((base + 4) as *mut i32) = len7;
                    *((base + 0) as *mut i32) = ptr7;
                    *((base + 8) as *mut u8) = (kind6.clone() as i32) as u8;
                  }
                }
                *((ptr3 + 16) as *mut i32) = len8;
                *((ptr3 + 12) as *mut i32) = result8 as i32;
                let vec11 = exports4;
                let len11 = vec11.len() as i32;
                let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 12, 4);
                let result11 = if layout11.size() != 0
                {
                  let ptr = alloc::alloc(layout11);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout11);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec11.into_iter().enumerate() {
                  let base = result11 as i32 + (i as i32) * 12;
                  {
                    let Export{ name:name9, kind:kind9, } = e;
                    let vec10 = (name9.into_bytes()).into_boxed_slice();
                    let ptr10 = vec10.as_ptr() as i32;
                    let len10 = vec10.len() as i32;
                    ::core::mem::forget(vec10);
                    *((base + 4) as *mut i32) = len10;
                    *((base + 0) as *mut i32) = ptr10;
                    *((base + 8) as *mut u8) = (kind9.clone() as i32) as u8;
                  }
                }
                *((ptr3 + 24) as *mut i32) = len11;
                *((ptr3 + 20) as *mut i32) = result11 as i32;
                let vec12 = (wit4.into_bytes()).into_boxed_slice();
                let ptr12 = vec12.as_ptr() as i32;
                let len12 = vec12.len() as i32;
                ::core::mem::forget(vec12);
                *((ptr3 + 32) as *mut i32) = len12;
                *((ptr3 + 28) as *mut i32) = ptr12;
              } },
              Err(e) => { {
                *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                let vec13 = (e.into_bytes()).into_boxed_slice();
                let ptr13 = vec13.as_ptr() as i32;
                let len13 = vec13.len() as i32;
                ::core::mem::forget(vec13);
                *((ptr3 + 8) as *mut i32) = len13;
                *((ptr3 + 4) as *mut i32) = ptr13;
              } },
            };ptr3
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_psibase:component-parser/provider#[method]component-parser.parse"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_method_component_parser_parse(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                  let l5 = *((arg0 + 12) as *const i32);
                  let l6 = *((arg0 + 16) as *const i32);
                  let base7 = l5;
                  let len7 = l6;
                  for i in 0..len7 {
                    let base = base7 + i *12;
                    {
                      let l3 = *((base + 0) as *const i32);
                      let l4 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                    }
                  }
                  wit_bindgen::rt::dealloc(base7, (len7 as usize) * 12, 4);
                  let l10 = *((arg0 + 20) as *const i32);
                  let l11 = *((arg0 + 24) as *const i32);
                  let base12 = l10;
                  let len12 = l11;
                  for i in 0..len12 {
                    let base = base12 + i *12;
                    {
                      let l8 = *((base + 0) as *const i32);
                      let l9 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l8, (l9) as usize, 1);
                    }
                  }
                  wit_bindgen::rt::dealloc(base12, (len12 as usize) * 12, 4);
                  let l13 = *((arg0 + 28) as *const i32);
                  let l14 = *((arg0 + 32) as *const i32);
                  wit_bindgen::rt::dealloc(l13, (l14) as usize, 1);
                },
                _ => {
                  let l15 = *((arg0 + 4) as *const i32);
                  let l16 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l15, (l16) as usize, 1);
                },
              }
            }
          };
        };
        use super::super::super::super::super::ComponentParser as _ComponentParserImpl;
        pub trait GuestComponentParser {
          /// Parses a wasm component file into a component object
          fn parse(&self,name: wit_bindgen::rt::string::String,bytes: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<Component,wit_bindgen::rt::string::String>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 36]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 36]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:component"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1756] = [3, 0, 9, 99, 111, 109, 112, 111, 110, 101, 110, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 179, 2, 1, 65, 2, 1, 66, 16, 1, 109, 6, 6, 109, 111, 100, 117, 108, 101, 8, 102, 117, 110, 99, 116, 105, 111, 110, 5, 118, 97, 108, 117, 101, 4, 116, 121, 112, 101, 8, 105, 110, 115, 116, 97, 110, 99, 101, 9, 99, 111, 109, 112, 111, 110, 101, 110, 116, 4, 0, 9, 105, 116, 101, 109, 45, 107, 105, 110, 100, 3, 0, 0, 1, 114, 2, 4, 110, 97, 109, 101, 115, 4, 107, 105, 110, 100, 1, 4, 0, 6, 105, 109, 112, 111, 114, 116, 3, 0, 2, 1, 114, 2, 4, 110, 97, 109, 101, 115, 4, 107, 105, 110, 100, 1, 4, 0, 6, 101, 120, 112, 111, 114, 116, 3, 0, 4, 1, 112, 3, 1, 112, 5, 1, 114, 4, 4, 110, 97, 109, 101, 115, 7, 105, 109, 112, 111, 114, 116, 115, 6, 7, 101, 120, 112, 111, 114, 116, 115, 7, 3, 119, 105, 116, 115, 4, 0, 9, 99, 111, 109, 112, 111, 110, 101, 110, 116, 3, 0, 8, 4, 0, 16, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 3, 1, 1, 104, 10, 1, 112, 125, 1, 106, 1, 9, 1, 115, 1, 64, 3, 4, 115, 101, 108, 102, 11, 4, 110, 97, 109, 101, 115, 5, 98, 121, 116, 101, 115, 12, 0, 13, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 46, 112, 97, 114, 115, 101, 1, 14, 4, 1, 33, 112, 115, 105, 98, 97, 115, 101, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 47, 112, 114, 111, 118, 105, 100, 101, 114, 5, 0, 11, 14, 1, 0, 8, 112, 114, 111, 118, 105, 100, 101, 114, 3, 0, 0, 7, 221, 2, 1, 65, 2, 1, 65, 2, 1, 66, 16, 1, 109, 6, 6, 109, 111, 100, 117, 108, 101, 8, 102, 117, 110, 99, 116, 105, 111, 110, 5, 118, 97, 108, 117, 101, 4, 116, 121, 112, 101, 8, 105, 110, 115, 116, 97, 110, 99, 101, 9, 99, 111, 109, 112, 111, 110, 101, 110, 116, 4, 0, 9, 105, 116, 101, 109, 45, 107, 105, 110, 100, 3, 0, 0, 1, 114, 2, 4, 110, 97, 109, 101, 115, 4, 107, 105, 110, 100, 1, 4, 0, 6, 105, 109, 112, 111, 114, 116, 3, 0, 2, 1, 114, 2, 4, 110, 97, 109, 101, 115, 4, 107, 105, 110, 100, 1, 4, 0, 6, 101, 120, 112, 111, 114, 116, 3, 0, 4, 1, 112, 3, 1, 112, 5, 1, 114, 4, 4, 110, 97, 109, 101, 115, 7, 105, 109, 112, 111, 114, 116, 115, 6, 7, 101, 120, 112, 111, 114, 116, 115, 7, 3, 119, 105, 116, 115, 4, 0, 9, 99, 111, 109, 112, 111, 110, 101, 110, 116, 3, 0, 8, 4, 0, 16, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 3, 1, 1, 104, 10, 1, 112, 125, 1, 106, 1, 9, 1, 115, 1, 64, 3, 4, 115, 101, 108, 102, 11, 4, 110, 97, 109, 101, 115, 5, 98, 121, 116, 101, 115, 12, 0, 13, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 46, 112, 97, 114, 115, 101, 1, 14, 4, 1, 33, 112, 115, 105, 98, 97, 115, 101, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 47, 112, 114, 111, 118, 105, 100, 101, 114, 5, 0, 4, 1, 34, 112, 115, 105, 98, 97, 115, 101, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 47, 99, 111, 109, 112, 111, 110, 101, 110, 116, 4, 0, 11, 15, 1, 0, 9, 99, 111, 109, 112, 111, 110, 101, 110, 116, 3, 2, 0, 0, 198, 7, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 112, 114, 111, 118, 105, 100, 101, 114, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 91, 109, 101, 116, 104, 111, 100, 93, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 112, 97, 114, 115, 101, 114, 46, 112, 97, 114, 115, 101, 34, 58, 34, 80, 97, 114, 115, 101, 115, 32, 97, 32, 119, 97, 115, 109, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 102, 105, 108, 101, 32, 105, 110, 116, 111, 32, 97, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 111, 98, 106, 101, 99, 116, 34, 125, 44, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 105, 116, 101, 109, 45, 107, 105, 110, 100, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 82, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 32, 107, 105, 110, 100, 32, 111, 102, 32, 105, 109, 112, 111, 114, 116, 32, 111, 114, 32, 101, 120, 112, 111, 114, 116, 32, 105, 110, 32, 97, 32, 87, 101, 98, 65, 115, 115, 101, 109, 98, 108, 121, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 109, 111, 100, 117, 108, 101, 34, 58, 34, 84, 104, 101, 32, 105, 116, 101, 109, 32, 105, 115, 32, 97, 32, 99, 111, 114, 101, 32, 109, 111, 100, 117, 108, 101, 46, 34, 44, 34, 102, 117, 110, 99, 116, 105, 111, 110, 34, 58, 34, 84, 104, 101, 32, 105, 116, 101, 109, 32, 105, 115, 32, 97, 32, 102, 117, 110, 99, 116, 105, 111, 110, 46, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 84, 104, 101, 32, 105, 116, 101, 109, 32, 105, 115, 32, 97, 32, 118, 97, 108, 117, 101, 46, 34, 44, 34, 116, 121, 112, 101, 34, 58, 34, 84, 104, 101, 32, 105, 116, 101, 109, 32, 105, 115, 32, 97, 32, 116, 121, 112, 101, 46, 34, 44, 34, 105, 110, 115, 116, 97, 110, 99, 101, 34, 58, 34, 84, 104, 101, 32, 105, 116, 101, 109, 32, 105, 115, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 46, 34, 44, 34, 99, 111, 109, 112, 111, 110, 101, 110, 116, 34, 58, 34, 84, 104, 101, 32, 105, 116, 101, 109, 32, 105, 115, 32, 97, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 125, 125, 44, 34, 105, 109, 112, 111, 114, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 82, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 110, 32, 105, 109, 112, 111, 114, 116, 32, 105, 110, 32, 97, 32, 87, 101, 98, 65, 115, 115, 101, 109, 98, 108, 121, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 110, 97, 109, 101, 34, 58, 34, 84, 104, 101, 32, 105, 109, 112, 111, 114, 116, 32, 110, 97, 109, 101, 46, 34, 44, 34, 107, 105, 110, 100, 34, 58, 34, 84, 104, 101, 32, 105, 109, 112, 111, 114, 116, 32, 107, 105, 110, 100, 46, 34, 125, 125, 44, 34, 101, 120, 112, 111, 114, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 82, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 110, 32, 101, 120, 112, 111, 114, 116, 32, 105, 110, 32, 97, 32, 87, 101, 98, 65, 115, 115, 101, 109, 98, 108, 121, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 110, 97, 109, 101, 34, 58, 34, 84, 104, 101, 32, 101, 120, 112, 111, 114, 116, 32, 110, 97, 109, 101, 46, 34, 44, 34, 107, 105, 110, 100, 34, 58, 34, 84, 104, 101, 32, 101, 120, 112, 111, 114, 116, 32, 107, 105, 110, 100, 46, 34, 125, 125, 44, 34, 99, 111, 109, 112, 111, 110, 101, 110, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 82, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 97, 32, 87, 101, 98, 65, 115, 115, 101, 109, 98, 108, 121, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 110, 97, 109, 101, 34, 58, 34, 84, 104, 101, 32, 110, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 44, 34, 105, 109, 112, 111, 114, 116, 115, 34, 58, 34, 84, 104, 101, 32, 105, 109, 112, 111, 114, 116, 115, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 44, 34, 101, 120, 112, 111, 114, 116, 115, 34, 58, 34, 84, 104, 101, 32, 101, 120, 112, 111, 114, 116, 115, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 46, 34, 44, 34, 119, 105, 116, 34, 58, 34, 84, 104, 101, 32, 87, 73, 84, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 39, 115, 32, 119, 111, 114, 108, 100, 46, 34, 125, 125, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
