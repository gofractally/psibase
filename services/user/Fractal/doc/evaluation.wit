////////////////////////////////////// TYPES
/// https://github.com/gofractally/psibase/issues/1104

interface hook-service-api {
    eval-register: func(eval-id, user, description) -> bool
    eval-propose: func(proposer, eval-id, group-nr, ordering: list<u8>)
    eval-attest: func(attester, eval-id, group-nr, ordering: list<account>)
    eval-group-fin: func(eval-id, group-nr, hash)
 }
 
 record Timings { // seconds
    registration: u32,
    deliberation: u32, 
    submission: u32
 }
 
 record EvalConfig {
    owner: account,
    use-hooks: bool,
    group-sizes: option<list<u8>>, // None means only one group, otherwise list entries are allowed group sizes. Minimum = 3.
    timings: Timings
 }
 
 record Eval {
    id: u32,
    creation-date,
    config: EvalConfig,   
 }
 
 record score {
    eval-id: u32, 
    user: account,
    entropy: u64,
    rank: u8,
    group-id: option<u16>,
    group-key: option<list<u8>>,
 }
 score-table: table<score>
 
 record attestation: {
     eval-id: u32,   
     hash: list<u8>, // primary key: { evail-id, hash }
     group-nr: u16,
     ordering: list<account>,
     nr-attested: u8,
 }
 
 ////////////////////////////////////// ACTIONS
 
 /// Creates a new evaluation
 /// - Temporarily: Anyone can open an eval on behalf of anyone. 
 ///   Future: Validate that the sender == owner
 open(eval: Eval)
 
 /// Register for an evaluation
 /// - Requires specified eval is open
 /// - Requires being in the registration phase
 /// - Calls `hook-service:is-valid-reg` to allow eval owner to enforce constraints
 register(id: u32, entropy: u64, description: option<string>)
 
 /// Generate groups
 /// - Requires being in the deliberation phase
 /// - Calculates the groups on the server side
 generate-groups(id: u32)
 
 /// Publish group-key.
 /// The group key is an encrypted symmetric key used for sharing group-private messages
 /// The number of keys should match the number of group members
 /// - Requires being in the deliberation phase
 /// - Requires no group-key exists
 group-key(id: u32, group-nr: u16, keys: list<list<u8>>)
 
 /// Propose a rank-ordering (encrypted with group key)
 /// - Requires being in the deliberation phase
 propose(id: u32, group-nr: u16, ordering: list<u8>)
 
 /// Attest to a final rank-ordering
 /// - Requires being in the submission phase
 /// - Requires that sender is in the specified group
 /// - Requires that the sender has not attested prior
 attest(id: u32, group-nr: u16, ordering: list<account>)
 
 /// Closes an evaluation, deleting all associated data
 /// - Requires that the submission phase has ended
 /// - Temporarily: anyone can close an eval
 ///   Future: Validate that the sender == owner
 close(id: u32)