////////////////////////////////////// TYPES
/// https://github.com/gofractally/psibase/issues/1104

interface hook-service-api {
  /// Validates if a user can register for an evaluation.
  eval-register: func(eval-id: u32, user: account, description: option<string>) -> bool

  /// Handles an attestation submission for a group in an evaluation.
  eval-attest: func(attester: account, eval-id: u32, group-nr: u16, ordering: list<account>)

}

/// Initializes the service by creating a configuration table with an initial last_used_id of 0.
init: func()

/// Checks if the service has been initialized by verifying the existence of the configuration table.
check-init: func()

/// Emits a history event when group keys are set for an evaluation.
keysset: func(evaluation-id: u32, group-number: u32, keys: list<list<u8>>, hash: string)

/// Creates a new evaluation with specified parameters.
create: func(registration: u32, deliberation: u32, submission: u32, finish-by: u32, group-sizes: list<u8>, rank-amount: u8, use-hooks: bool)

/// Retrieves an evaluation by its ID.
get-evaluation: func(id: u32) -> option<evaluation>

/// Retrieves a group by evaluation ID and group number.
get-group: func(id: u32, group-number: u32) -> option<group>

/// Retrieves the last used ID from the configuration table.
get-last-id: func() -> u32

/// Retrieves all groups for an evaluation.
get-groups: func(id: u32) -> list<group>

/// Retrieves all users for an evaluation.
get-users: func(id: u32) -> list<user>

/// Retrieves a specific user in an evaluation.
get-user: func(id: u32, user: account-number) -> option<user>

/// Retrieves users in a specific group of an evaluation.
get-group-users: func(id: u32, group-number: u32) -> list<user>

/// Retrieves user settings for an account.
get-user-settings: func(account-number: account-number) -> option<user-settings>

/// Starts an evaluation, shuffles users, and assigns them to groups.
start: func(id: u32, entropy: u64)

/// Sets a key for the sender's user settings.
set-key: func(key: list<u8>)

/// Submits group keys for an evaluation and emits a history event.
group-key: func(evaluation-id: u32, keys: list<list<u8>>, hash: string)

/// Closes an evaluation, deleting it from storage.
close: func(id: u32)

/// Submits a proposal for a user in an evaluation.
propose: func(evaluation-id: u32, proposal: list<u8>)

/// Submits an attestation for a user in an evaluation.
attest: func(evaluation-id: u32, attestation: list<u8>)

/// Registers a user for an evaluation.
register: func(id: u32, account-number: account-number)

/// Unregisters a user from an evaluation.
unregister: func(id: u32)

/// Record representing an evaluation.
record evaluation {
  id: u32,
  group-sizes: list<u8>,
  created-time: u32,
  owner: account-number,
  registration: u32,
  deliberation: u32,
  submission: u32,
  finish-by: u32,
  rank-amount: u8,
  use-hooks: bool
}

/// Record representing a group within an evaluation.
record group {
  evaluation-id: u32,
  group-number: u32,
  key-submitter: option<account-number>,
  result: option<list<u8>>
}

/// Record representing a user in an evaluation.
record user {
  evaluation-id: u32,
  account: account-number,
  group-number: option<u32>,
  proposal: option<list<u8>>,
  attestation: option<list<u8>>
}

/// Record representing user settings.
record user-settings {
  account: account-number,
  key: list<u8>
}

/// Type representing an account number.
type account-number = u64