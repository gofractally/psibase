interface types {
    @since(feature = member-fractals)
    enum member-type {
        user,
        fractal,
    }

    record member {
        // ...member
        @since(feature = member-fractals)
        type: member-type,
    }
}


interface fractal-queries {
    // Initial Approach: if it can be calculated in a query, don't put it in state (to minimize complexity out the gate)
    get-members: func(fractal: account, member-type: option<member-type>, titles: option<u32>) -> option<list<member>>;
    get-member: func(fractal: account, account: string) -> option<member>;

    get-fractal: func(fractal: account) -> fractal;

    get-delegates: func(fractal: account) -> list<account>;
    get-council: func(fractal: account) -> list<account>;
}
