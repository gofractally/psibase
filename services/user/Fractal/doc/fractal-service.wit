/// This .wit file acts as a spec for multiple implementation phases of the Fractal service.
/// feature gating is used to show the phases.
/// The phases are expected to progress as follows:
/// v1: ungated features
/// v2:
/// - petitions
/// - schduled-meetings
/// v3:
/// - member-fractals
/// v4:
/// - fractal-invites // referral rewards
/// 
/// WIT Spec
/// https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-worlds

interface types {
    @since(feature = scheduled-meetings)
    record meeting-config {
        // @velua, you spent plenty of time on this for the Psinq UI. Would you fill in the minimal set of details we determined were necessary for meeting schedule?
    }

    record fractal {
        service: account, // Primary key
        created-at: timepointsec,
        name: string,
        mission: string,
        // avatar - stored in `sites` service
    }

    
    // Titles
    //
    // candidate, u32(1) << 0; 
    // @since(feature = member-fractals)
    // ambassador, u32(1) << 1;
    record member {
        account: account, // primary key
        @since(feature = fractal-invites)
        inviter: option<account>,
        // display name, bio, avatar - stored in `sites` service
        joined-at: timestamp,
        titles: u32,
    }

    enum eval-type {
        reputation,
        favor,
    }

    record eval {
        service: account,   // { Primary key,
        id: u32,            //   Primary key }
        type: eval-type,
    }

    record score {
        fractal: account, // { Primary key,
        account: account, //   Primary key,
        type: eval-type,  //   Primary key }
        value: u32,
    }
}

// Don't need to pass fractal account, the caller is always the fractal
interface fractal {
    create-fractal: func(details: details);
    set-name: func(name: string);
    set-mission: func(mission: string);

    create-eval: func(eval-type: eval-type) -> u32;
    finish-eval: func(id: u32);
}

interface member {
    join-waitlist: func(fractal: account);
    config-candidacy: func(fractal: account, enable: bool);

    @since(feature = fractal-invites)
    invite: func(fractal: account, account: account);

    @since(feature = petitions)
    create-petition: func(fractal: account, subject: string, body: string);
}

interface eval-hooks {
    // Someone registered for an eval, chance to allow/disallow
    eval-register: func(eval-id: string, user: string, description: string) -> bool;

    // Someone finished a group of an eval, update corresponding score
    eval-group-fin: func(eval-id: u32, group-nr: u32) -> bool;

    // ... any others
}
