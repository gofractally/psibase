//// SERVICE

interface types {

    record eval {
        id: u32, // primary key
        type: u8, // 0 = reputation, 1 = favor, etc.
    }

    record member {
        account: string, // primary key
        name: string,
        joined-at: timestamp,
        reputation: u32,
        candidate: bool,
    }
}

interface fractal {
    use types.{config};
    create-eval: func(eval-type: u8) -> u32;

    // Delete eval to free resources
    // Token distribution
    // Optionally:
    // - Punish misaligned or missing attestations?
    finish-eval: func(eval-id: u32);
}

interface member {
    join-waitlist: func();
    config-candidacy: func(enable: bool);
}

interface eval-hooks {
    // Someone registered for an eval, chance to allow/disallow
    eval-register: func(eval-id: string, user: string, description: string) -> bool;
    // Someone finished a group of an eval, update corresponding score
    eval-group-fin: func(eval-id: u32, group-nr: u32) -> bool;
}





//// RPC SERVICE

interface queries {
    use types.{member, eval};
    get-member: func(account: string) -> member;
    all-members: func() -> list<member>; // paginated
    get-eval: func(eval-id: u32) -> eval;
}





//// PLUGIN

interface types {
    enum eval-type {
        reputation,
    }
}

interface member {
    join-waitlist: func();
    config-candidacy: func(enable: bool);
}

interface evals {
    use types.{eval-type};
    create-eval: func(eval-type: eval-type); // Stages a tx - must be approved by council (or producers in v0.1)
    finish-eval: func(eval-id: u32);         // can be called/executed by anyone, resources probably subsidized by the fractal
}

// In the future:
// interface petitions {
//     change-name: func(name: string);
//     change-mission: func(mission: string);
// }

