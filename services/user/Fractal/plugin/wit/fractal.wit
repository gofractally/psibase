package fractal:plugin;

interface types {
    type account = string;
    type fractal-id = account;

    record fractal-profile {
        account: account,
        name: string,
        description: string,
        region: string,
        language-code: string,
        council: list<account>,
    }

    record fractal-creation-info {
        name: string,
        description: string,
        region: string,
        language-code: string,
    }

    record fractal {
        fractal-profile: fractal-profile,
        members: list<account>,
    }

    type member-stats = list<score-stat>;
    record public-profile {
        account: account,

        // Mutable by account
        member-flags: member-flags,
    }

    record member-flags {
        display-name: string,
        description: string,
    }
}

interface intf {
    use common:plugin/types.{error};
    use types.{
        fractal-id, 
        fractal-creation-info,
        account,  
        public-profile,
        member-flags,
    };

    // Called by: Fractal founder admin
    create: func(fractal-details: fractal-creation-info) -> result<fractal-id, error>;

    // Called by: Non-members
    apply: func(fractal-id: fractal-id);

    // Called by: Members
    invite: func(fractal-id: fractal-id, prospective: account);
    update-member-flags: func(fractal-id: fractal-id, member-flags: member-flags);
}

world fractal-plugin {
    export intf;
}