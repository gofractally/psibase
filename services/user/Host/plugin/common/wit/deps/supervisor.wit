package supervisor:bridge;

interface types {
    record error {
        code: u32,
        producer: plugin-id,
        message: string,
    }

    record plugin-id {
        service: string,
        plugin: string,
    }

    variant body-types {
        bytes(list<u8>),
        json(string),
        text(string),
    }

    record header {
        key: string,
        value: string,
    }

    record http-request {
        uri: string,
        method: string,
        headers: list<header>,
        body: option<body-types>,
    }

    record http-response {
        status: u32,
        headers: list<header>,
        body: option<body-types>,
    }
}

interface intf {
    use types.{http-request, http-response, error, plugin-id};

    // The top-level app through which the app is accessing psibase
    // 
    // Cannot be derived from the callstack, as the supervisor is allowed
    //   to originate calls in the context of a non-supervisor root window 
    //   (e.g. start-tx, finish-tx)
    get-active-app: func() -> string;

    send-request: func(req: http-request) -> result<http-response, error>;

    // The last items in the list are the most recent services in the callstack
    service-stack: func() -> list<string>;

    get-root-domain: func() -> string;
}

interface database {
    get: func(duration: u8, key: string) -> option<list<u8>>;
    set: func(duration: u8, key: string, value: list<u8>);
    remove: func(duration: u8, key: string);
}

world imports {
    import intf;
    import database;
}
