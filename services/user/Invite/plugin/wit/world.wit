package invite:plugin;

interface types {

    enum invite-state {
        pending,
        accepted,
        rejected
    }

    /// This is the information encoded into an invite URL.
    /// 
    /// Fields:
    /// * `inviter` - The account responsible for generating the invite
    /// * `app` - The app responsible for generating the invite
    /// * `state` - The state of the invite
    /// * `actor` - The name of the account to most recently accept or reject the invite
    /// * `expiry` - The UTC timestamp of the invite's expiration
    /// * `callback` - The link to which the user should be returned after responding to the invite
    /// 
    /// Other notes:
    /// `actor` is useful primarily for displaying information about an invite that has already been
    ///    used.
    record invite {
        inviter: string,
        app: string,
        state: invite-state,
        actor: string,
        expiry: string,
        callback: string,
    }

    type url = string;
    type invite-id = string;
}

// interface admin {
//     use host:common/types.{error};

//     // Restricts the accounts that are able to create invites to those 
//     // that exist in the whitelist.
//     // 
//     // This method may only be called by the service account on which the 
//     // invite service is deployed.
//     set-whitelist: func(accounts: list<string>) -> result<_, error>;

//     // Prevents accounts that are in the blacklist from creating accounts.
//     // 
//     // This method may only be called by the service account on which the 
//     // invite service is deployed.
//     set-blacklist: func(accounts: list<string>) -> result<_, error>;
// }

/// Functionality exposed for the inviter
interface inviter {
    use host:common/types.{error};
    use types.{url};

    /// Allows a user to generate an invite link that can be used to 
    /// invite someone (with or without a preexisting account) to use 
    /// an app.
    /// 
    /// Parameters
    /// * `callback-subpath`: This the subpath of the app to which the invited user
    ///   is redirected if they accept the invite (e.g. "/welcome-page")
    /// 
    /// Successful return value:
    ///  * A URL containing the ID of the invite that was created. This URL
    ///    can be sent to a user to invite them to the app.
    generate-invite: func(callback-subpath: string) -> result<url, error>;

    /// Used by the creator of an invite to delete it. Deleted invites are removed
    /// from the database. An invite can be deleted regardless of whether it has been
    /// accepted, rejected, or is still pending.
    /// 
    /// Parameters
    /// * `invite-public-key`: The key that is publicly associated with the private key 
    ///   embedded in the invite link. This public key should also exist on chain in a table
    ///   in the invite service.
    delete-invite: func(invite-public-key: list<u8>) -> result<_, error>;
}


/// Functionality exposed for the recipient of an invite (the invitee)
interface invitee {
    use host:common/types.{error};

    use types.{invite, invite-id};

    /// Retrieves the `types.invite` information encoded within the invite ID to 
    /// provide the invite interface.
    /// 
    /// Parameters: 
    /// * `id`: The value in the query parameter of the invite URL that contains the
    ///   invite ID.
    decode-invite: func(id: invite-id) -> result<invite, error>;

    /// Call to accept an invite with a new account.
    /// 
    /// Parameters
    /// * `account`: The name of the new account being created
    /// * `id`: The id from the invite URL query parameter
    accept-with-new-account: func(account: string, id: invite-id) -> result<_, error>;

    /// Called by existing accounts or the system account "invited-sys" to reject
    /// an invite. Once an invite is rejected, it cannot be accepted or used to
    /// create a new account.
    /// 
    /// Parameters
    /// * `id`: The id from the invite URL query parameter.
    reject: func(id: invite-id) -> result<_, error>;
}

world imports {
    import inviter;
    import invitee;
}
