package packages:plugin;

interface types {
    record package-ref {
        name: string,
        version: string,
    }
    /// Package metadata including where to fetch the package
    record package-info {
        name: string,
        version: string,
        description: string,
        depends: list<package-ref>,
        accounts: list<string>,
        sha256: string,
        file: string,
    }
    /// Package metadata
    record meta {
        name: string,
        version: string,
        description: string,
        depends: list<package-ref>,
        accounts: list<string>,
    }
    /// The location of a package repository.
    ///
    /// - If only `url` is provided, it means to use a static
    ///   package repository at that location
    /// - If only `account` is provided, it means to use an
    ///   account on this chain
    /// - If `account` and `url` are both provided, it means to
    ///   use an account on a foreign chain
    record package-source {
        url: option<string>,
        account: option<string>,
    }

    /// Specifies the default behavior for existing packages.
    /// Package dependencies and explicitly requested versions
    /// take precedence.
    enum package-preference {
        /// Prefer the highest version regardless of compatibility
        /// with the existing version
        best,
        /// Prefer semver compatible versions
        compatible,
        /// Prefer leaving the package unchanged
        current,
    }

    // Indicates that a package should be installed, removed, or replaced.
    record package-op-info {
        old: option<meta>,
        new: option<package-info>,
    }

    // Like package-op-info, but has the contents of the new package.
    record package-op-full {
        old: option<meta>,
        new: option<list<u8>>,
    }
}

interface queries {
    use host:common/types.{error};
    use types.{meta, package-source};
    get-installed-packages: func() -> result<list<meta>, error>;
    get-sources: func() -> result<list<package-source>, error>;
}

world imports {
    import queries;
}
