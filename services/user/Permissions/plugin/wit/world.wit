package permissions:plugin;

interface types {
    record prompt-context {
        user: string,
        caller: string,
        callee: string,
        risk-level: u8,
        description: string,
    }

    record risk {
        level: u8,
        description: string,
    }
}

interface api {
    use host:common/types.{error};
    use types.{risk};

    /// The caller of this function (the "callee") wants to check if the user has granted the specified `caller`
    ///     a sufficient permission level to use callee's plugin on the user's behalf. If the caller has insufficient 
    ///     permission, this function will cause the user to be prompted to consider the request.
    /// 
    /// Parameters: 
    /// * `caller` - The app requesting permission
    /// * `risk`   - Valid values [0,1,2,3,4,5,6].
    ///              0: Allows any caller app access on the user's behalf
    ///              1-5: 1 is the least risk, 5 is the most risk.
    ///              6: Allows no one (except the callee app itself) access on the user's behalf.
    ///              The risk level of operation for the user. The higher the risk, the more the user should
    ///              trust the caller app. This is just a hint to help the user make a decision.
    /// * `debug-label` - If an unexpected error occurs, this label will be printed with the error
    ///                   message to help you track down the root cause.
    authorize: func(caller: string, risk: risk, debug-label: string) -> result<bool, error>;
}

world imports {
    import api;
    import types;
}
