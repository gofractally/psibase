package permissions:plugin;

interface types {
    record prompt-context {
        user: string,
        caller: string,
        callee: string,
    }
}

interface api {
    use host:common/types.{error};

    /// The caller of this function (the "callee") wants to check if the specified `caller` has the user's
    ///     permission to use callee's plugin on the user's behalf. If no permission has yet been given, 
    ///     this function will cause the user to be prompted to respond to the request.
    /// 
    /// Parameters: 
    /// * `caller` - The app requesting permission
    prompt-auth: func(caller: string) -> result<_, error>;

    /// The caller of this function (the "callee") wants to check if the specified `caller` has the user's
    ///     permission to use callee's plugin on the user's behalf. This function simply returns whether or
    ///     not permission has been granted, and will *not* trigger any user interaction.
    /// 
    /// Parameters:
    /// * `caller` - The app requesting permission
    is-auth: func(caller: string) -> result<bool, error>;

    /// Delete a previously added permission
    ///
    /// Parameters:
    /// `user` - The user granting access
    /// `caller` - The app requesting access to use `callee` on behalf of `user`
    /// `callee` - The app on whom functionality or data is being requested
    del-perm: func(user: string, caller: string, callee: string);
}

world imports {
    import api;
    import types;
}
