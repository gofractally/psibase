package sites:plugin;

interface types {
    record file {
        path: string,
        content-type: string,
        content: list<u8>,
    }
}

interface api {
    use types.{file};
    use host:common/types.{error};

    /// Upload a single file to Sites.
    /// 
    /// This file will be accessible at the subdomain of the caller, 
    /// at the specified path.
    /// 
    /// Brotli file compression is applied at the specified level if the 
    /// file-type of the content is supported. Compression-quality must be 
    /// within 1-11 (inclusive). Specifying level 0 will disable compression.
    /// 
    /// The maximum size of a transaction submitted to upload content is 1mb.
    /// This also serves as the de facto limit on the size of a single uploaded 
    /// file (after compression if applied).
    upload: func(file: file, compression-quality: u8) -> result<_, error>;

    /// Upload multiple files to Sites.
    /// 
    /// These files will be accessible at the subdomain of the caller, 
    /// at the specified paths.
    /// 
    /// Brotli file compression is applied at the specified level if the 
    /// file-type of the content is supported. Compression-quality must be 
    /// within 1-11 (inclusive). Specifying level 0 will disable compression.
    /// 
    /// The maximum size of a transaction submitted to upload content is 1mb.
    /// This also serves as the de facto limit on the size of a single uploaded 
    /// file (after compression if applied).
    /// 
    /// If the transaction size limit is exceeded, returns the index of the
    /// first file that was not uploaded.
    /// 
    /// If all files are uploaded successfully, returns 0.
    /// 
    /// If the first file in the list exceeds the transaction size limit,
    /// the transaction will be aborted and the error will contain the path
    /// of the file that caused the error.
    upload-tree: func(files: list<file>, compression-quality: u8) -> result<u16, error>;

    /// Remove content from the caller's subdomain
    remove: func(path: string) -> result<_, error>;

    /// Enable or disable single-page application mode.
    /// When enabled, all content requests return the root document
    /// except for requests to static assets (files with an extension).
    enable-spa: func(enable: bool) -> result<_, error>;

    /// Set the Content Security Policy for the specified path.
    /// If a specific CSP is set, it takes precedence over the global CSP.
    /// If no specific or global CSP is set, a default CSP is used.
    set-csp: func(path: string, csp: string) -> result<_, error>;

    /// Enable or disable caching of responses.
    /// Cache strategy:
    /// - `If-None-Match` header is checked against the hash of the content
    /// - The hash is stored in the `ETag` header
    /// - If the hash matches, a 304 Not Modified response is returned
    /// - If the hash does not match, the new content is returned with an updated `ETag` header
    set-cache-mode: func(enable: bool) -> result<_, error>;
}

world imports {
    import api;
}
