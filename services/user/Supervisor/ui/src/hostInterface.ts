import {
    QualifiedDynCallArgs,
    QualifiedFunctionCallArgs,
    QualifiedResourceCallArgs,
} from "@psibase/common-lib";

import { RecoverableErrorPayload } from "./plugin/errors";

export type Result<T, E> = T | E;

export interface HttpRequest {
    uri: string;
    method: string;
    headers: { key: string; value: string }[];
    body?: BodyType;
}

export interface HttpResponse {
    status: number;
    headers: { key: string; value: string }[];
    body: BodyType;
}

export interface BodyType {
    tag: string;
    val: Uint8Array | string;
}

export interface PluginPostDetails {
    endpoint: string;
    headers: [string, string][];
    body: BodyType;
}

// This is the interface linked to the host plugin
export interface HostInterface {
    dbGet: (duration: number, key: string) => Uint8Array | null;

    dbSet: (duration: number, key: string, value: Uint8Array) => void;

    dbRemove: (duration: number, key: string) => void;

    // Interface for the autogenerated proxy package
    syncCall: (args: QualifiedFunctionCallArgs) => any;

    syncCallResource: (args: QualifiedResourceCallArgs) => any;

    syncCallDyn: (args: QualifiedDynCallArgs) => any;

    sendRequest: (
        req: HttpRequest,
    ) => Result<HttpResponse, RecoverableErrorPayload>;

    getActiveApp(): string;

    getServiceStack(): string[];

    getRootDomain(): string;
}
