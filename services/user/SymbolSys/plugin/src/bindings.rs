// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod symbol_sys {
        pub mod plugin {

            #[allow(clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SymId = _rt::String;
                pub type Quantity = _rt::String;
                #[doc(hidden)]

                macro_rules! __export_symbol_sys_plugin_types_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_symbol_sys_plugin_types_cabi;
            }

            #[allow(clippy::all)]
            pub mod symbol_sys {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SymId =
                    super::super::super::super::exports::symbol_sys::plugin::types::SymId;
                pub type Quantity =
                    super::super::super::super::exports::symbol_sys::plugin::types::Quantity;

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::create(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_create<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_symbol_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 =
                        T::list_symbol(_rt::string_lift(bytes0), _rt::string_lift(bytes1));
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3.add(8).cast::<usize>() = len4;
                            *ptr3.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr3
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_symbol<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_unlist_symbol_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::unlist_symbol(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_unlist_symbol<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_buy_symbol_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::buy_symbol(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_buy_symbol<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn create(symbol_name: _rt::String) -> Result<(), _rt::String>;
                    fn list_symbol(symbol_id: SymId, price: Quantity) -> Result<(), _rt::String>;
                    fn unlist_symbol(symbol_id: SymId) -> Result<(), _rt::String>;
                    fn buy_symbol(symbol_id: SymId) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_symbol_sys_plugin_symbol_sys_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


    #[export_name = "symbol-sys:plugin/symbol-sys#create"]
    unsafe extern "C" fn export_create(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_create_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_symbol-sys:plugin/symbol-sys#create"]
    unsafe extern "C" fn _post_return_create(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_create::<$ty>(arg0)
    }

    #[export_name = "symbol-sys:plugin/symbol-sys#list-symbol"]
    unsafe extern "C" fn export_list_symbol(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_list_symbol_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }

    #[export_name = "cabi_post_symbol-sys:plugin/symbol-sys#list-symbol"]
    unsafe extern "C" fn _post_return_list_symbol(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_list_symbol::<$ty>(arg0)
    }

    #[export_name = "symbol-sys:plugin/symbol-sys#unlist-symbol"]
    unsafe extern "C" fn export_unlist_symbol(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_unlist_symbol_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_symbol-sys:plugin/symbol-sys#unlist-symbol"]
    unsafe extern "C" fn _post_return_unlist_symbol(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_unlist_symbol::<$ty>(arg0)
    }

    #[export_name = "symbol-sys:plugin/symbol-sys#buy-symbol"]
    unsafe extern "C" fn export_buy_symbol(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_buy_symbol_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_symbol-sys:plugin/symbol-sys#buy-symbol"]
    unsafe extern "C" fn _post_return_buy_symbol(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_buy_symbol::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_symbol_sys_plugin_symbol_sys_cabi;

                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_psibase_plugin_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::symbol_sys::plugin::types::__export_symbol_sys_plugin_types_cabi!($ty with_types_in $($path_to_types_root)*::exports::symbol_sys::plugin::types);
  $($path_to_types_root)*::exports::symbol_sys::plugin::symbol_sys::__export_symbol_sys_plugin_symbol_sys_cabi!($ty with_types_in $($path_to_types_root)*::exports::symbol_sys::plugin::symbol_sys);
  )
}
#[doc(inline)]
pub(crate) use __export_psibase_plugin_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:psibase-plugin:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 477] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd8\x02\x01A\x02\x01\
A\x06\x01B\x06\x01s\x04\0\x0eaccount-number\x03\0\0\x01s\x04\0\x06sym-id\x03\0\x02\
\x01s\x04\0\x08quantity\x03\0\x04\x04\x01\x17symbol-sys:plugin/types\x05\0\x02\x03\
\0\0\x06sym-id\x02\x03\0\0\x08quantity\x01B\x0c\x02\x03\x02\x01\x01\x04\0\x06sym\
-id\x03\0\0\x02\x03\x02\x01\x02\x04\0\x08quantity\x03\0\x02\x01j\0\x01s\x01@\x01\
\x0bsymbol-names\0\x04\x04\0\x06create\x01\x05\x01@\x02\x09symbol-id\x01\x05pric\
e\x03\0\x04\x04\0\x0blist-symbol\x01\x06\x01@\x01\x09symbol-id\x01\0\x04\x04\0\x0d\
unlist-symbol\x01\x07\x04\0\x0abuy-symbol\x01\x07\x04\x01\x1csymbol-sys:plugin/s\
ymbol-sys\x05\x03\x04\x01\x20symbol-sys:plugin/psibase-plugin\x04\0\x0b\x14\x01\0\
\x0epsibase-plugin\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compon\
ent\x070.201.0\x10wit-bindgen-rust\x060.20.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
