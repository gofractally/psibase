// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "transfer"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_transfer(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
    #[allow(unused_imports)]
    use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    ::cargo_component_bindings::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::transfer(::cargo_component_bindings::rt::string_lift(bytes0), arg2 as u32);
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1.into_bytes()).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_transfer"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_transfer(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      ::cargo_component_bindings::rt::dealloc(l0, (l1) as usize, 1);
    }
  };
};
use super::Component as _GuestImpl;
pub trait Guest {
  fn transfer(to: ::cargo_component_bindings::rt::string::String,amount: u32,) -> ::cargo_component_bindings::rt::string::String;
}

#[allow(unused_imports)]
use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 8]);
static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
pub mod component {
  pub mod token_sys {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub struct Funccallparams {
        pub service: ::cargo_component_bindings::rt::string::String,
        pub method: ::cargo_component_bindings::rt::string::String,
        pub params: ::cargo_component_bindings::rt::string::String,
      }
      impl ::core::fmt::Debug for Funccallparams {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Funccallparams").field("service", &self.service).field("method", &self.method).field("params", &self.params).finish()
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod imports {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Funccallparams = super::super::super::component::token_sys::types::Funccallparams;
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_logged_in_user() -> ::cargo_component_bindings::rt::string::String{
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:token-sys/imports")]
          extern "C" {
            #[link_name = "get-logged-in-user"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let len3 = l2 as usize;
          let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
          ::cargo_component_bindings::rt::string_lift(bytes3)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_to_tx(msg: &Funccallparams,){
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let super::super::super::component::token_sys::types::Funccallparams{ service:service0, method:method0, params:params0, } = msg;
          let vec1 = service0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = method0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let vec3 = params0;
          let ptr3 = vec3.as_ptr() as i32;
          let len3 = vec3.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:token-sys/imports")]
          extern "C" {
            #[link_name = "add-to-tx"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2, ptr3, len3);
        }
      }
      
    }
    
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:example"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 815] = [3, 0, 7, 101, 120, 97, 109, 112, 108, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 84, 1, 65, 2, 1, 66, 2, 1, 114, 3, 7, 115, 101, 114, 118, 105, 99, 101, 115, 6, 109, 101, 116, 104, 111, 100, 115, 6, 112, 97, 114, 97, 109, 115, 115, 4, 0, 14, 102, 117, 110, 99, 99, 97, 108, 108, 112, 97, 114, 97, 109, 115, 3, 0, 0, 4, 1, 25, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 116, 111, 107, 101, 110, 45, 115, 121, 115, 47, 116, 121, 112, 101, 115, 5, 0, 11, 11, 1, 0, 5, 116, 121, 112, 101, 115, 3, 0, 0, 7, 215, 1, 1, 65, 5, 1, 66, 2, 1, 114, 3, 7, 115, 101, 114, 118, 105, 99, 101, 115, 6, 109, 101, 116, 104, 111, 100, 115, 6, 112, 97, 114, 97, 109, 115, 115, 4, 0, 14, 102, 117, 110, 99, 99, 97, 108, 108, 112, 97, 114, 97, 109, 115, 3, 0, 0, 3, 1, 25, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 116, 111, 107, 101, 110, 45, 115, 121, 115, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 14, 102, 117, 110, 99, 99, 97, 108, 108, 112, 97, 114, 97, 109, 115, 1, 66, 6, 2, 3, 2, 1, 1, 4, 0, 14, 102, 117, 110, 99, 99, 97, 108, 108, 112, 97, 114, 97, 109, 115, 3, 0, 0, 1, 64, 0, 0, 115, 4, 0, 18, 103, 101, 116, 45, 108, 111, 103, 103, 101, 100, 45, 105, 110, 45, 117, 115, 101, 114, 1, 2, 1, 64, 1, 3, 109, 115, 103, 1, 1, 0, 4, 0, 9, 97, 100, 100, 45, 116, 111, 45, 116, 120, 1, 3, 4, 1, 27, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 116, 111, 107, 101, 110, 45, 115, 121, 115, 47, 105, 109, 112, 111, 114, 116, 115, 5, 2, 11, 13, 1, 0, 7, 105, 109, 112, 111, 114, 116, 115, 3, 2, 0, 7, 152, 2, 1, 65, 2, 1, 65, 7, 1, 66, 2, 1, 114, 3, 7, 115, 101, 114, 118, 105, 99, 101, 115, 6, 109, 101, 116, 104, 111, 100, 115, 6, 112, 97, 114, 97, 109, 115, 115, 4, 0, 14, 102, 117, 110, 99, 99, 97, 108, 108, 112, 97, 114, 97, 109, 115, 3, 0, 0, 3, 1, 25, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 116, 111, 107, 101, 110, 45, 115, 121, 115, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 14, 102, 117, 110, 99, 99, 97, 108, 108, 112, 97, 114, 97, 109, 115, 1, 66, 6, 2, 3, 2, 1, 1, 4, 0, 14, 102, 117, 110, 99, 99, 97, 108, 108, 112, 97, 114, 97, 109, 115, 3, 0, 0, 1, 64, 0, 0, 115, 4, 0, 18, 103, 101, 116, 45, 108, 111, 103, 103, 101, 100, 45, 105, 110, 45, 117, 115, 101, 114, 1, 2, 1, 64, 1, 3, 109, 115, 103, 1, 1, 0, 4, 0, 9, 97, 100, 100, 45, 116, 111, 45, 116, 120, 1, 3, 3, 1, 27, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 116, 111, 107, 101, 110, 45, 115, 121, 115, 47, 105, 109, 112, 111, 114, 116, 115, 5, 2, 1, 64, 2, 2, 116, 111, 115, 6, 97, 109, 111, 117, 110, 116, 121, 0, 115, 4, 0, 8, 116, 114, 97, 110, 115, 102, 101, 114, 1, 3, 4, 1, 27, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 116, 111, 107, 101, 110, 45, 115, 121, 115, 47, 101, 120, 97, 109, 112, 108, 101, 4, 0, 11, 13, 1, 0, 7, 101, 120, 97, 109, 112, 108, 101, 3, 4, 0, 0, 93, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 101, 120, 97, 109, 112, 108, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 101, 120, 97, 109, 112, 108, 101, 32, 119, 111, 114, 108, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 46, 34, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
