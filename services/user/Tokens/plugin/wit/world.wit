package component:tokens;



interface types {

    type quantity = string;
    type precision = u8;
    type tid = u32;
    type account-number = string;

    record balance {
        balance: string,
        creditor: string,
        debitor: string,
        token-id: u32,
    }
}

interface intf {
    use common:plugin/types.{error};
    use types.{precision, quantity, tid, account-number};
    create: func(a: precision, b: quantity) -> result<_, error>;
    burn: func(token-id: tid, amount: quantity, memo: string, account: account-number) -> result<_, error>;
    mint: func(token-id: tid, amount: quantity, memo: string) -> result<_, error>;
}

interface transfer {
    use common:plugin/types.{error};
    use types.{tid, account-number, quantity, balance};

    uncredit: func(token: tid, debitor: account-number, amount: quantity, memo: string) -> result<_, error>;


    credit: func(token: tid, receiver: account-number, amount: quantity, memo: string) -> result<_, error>;
    balances: func() -> result<list<balance>, error>;
    // credit: func(memo: string) -> result<string, error>;
}

/// An example world for the component to target.
world example {

    import wasi:random/random;
    import common:plugin/server;
    import common:plugin/client;

    
    
    export types;
    export intf;
    export transfer;
}
